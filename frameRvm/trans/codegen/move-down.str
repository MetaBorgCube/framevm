module move-down

imports
	signatures/frameRvm-sig
	signatures/expressions-sig
	desugar
	
	codegen/count-use
    
rules
  	move-down-all: FVMR_Program(s, l, blocks) -> FVMR_Program(s, l, <map(move-down-all)> blocks)
// 	move-down-all: f@FVMR_PseudoCode(body) -> f
  	move-down-all: FVMR_Block(lbl, body) -> FVMR_Block(lbl, <move-down-all> body)
  	move-down-all: Seq(body, vars) -> Seq(body', vars)
  	  with
  	  	(assigns, other) := <filter-split(is-pure-assign)> body;
  	  	body' := <inject-assign-all> (assigns, other, assigns)
  	  	
  	inject-assign-all: ([], body, _) -> body
  	inject-assign-all: ([f@Assign(ids, exp, pure)|t], body, assigns) -> inlined_body
  	  with
  	  	body'  := <inject-assign> (f, body, assigns);
  	  	inlined_body := <inject-assign-all> (t, body', assigns) 
  	  	
  	is-pure-assign: Assign(ids, exp, 0) -> ids
  	
  	
  	inject-assign: (assign, body, other) -> <try-inject-assign> (assign, body, <dec> <length> body, other)
  	
  	try-inject-assign: (assign, body, idx, other) -> body'
  	  where
  	  	body' := <insert-at> (assign, body, idx);
  	    <check-body> <debug> <concat> [<filter(not(equal(|assign)))> other, body']
  	    
  	try-inject-assign: (assign, body, idx, other) -> <try-inject-assign> (assign, body, <dec> idx, other)
  	  where
  	  	<gt> (idx, 0)
  	
  	insert-at: (assign, body, idx) -> body'
  	  with
  	  	(init, tail) := <split-at(|idx)> body;
  	  	body' := <concat> [init, [assign], tail]
  	  	
  	check-body: body -> body
  	  where
  	  	<count-use> Seq(body)
