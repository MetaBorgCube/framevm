{
	with i from [5,6,7]:
		with j from [1,2,3]:
			assert((i + j) == 9)
			print(i)
			print(j)
			
			// print 6, 3
			// print 7, 2
}

MAIN:
	new 3					// With i frame
	newscope P WITH_I_INIT	//
	
WITH_I_INIT:
	new 4					// Create array
							//
	dup						// Set length
	ipush 4					//
	setr [0]				//
							//
	dup						// First value
	ipush 5					//
	setr [1]				//
							//
	dup						// Second value
	ipush 6					//
	setr [2]				//
							//
	dup						// Third value
	ipush 7					//
	setr [3]				//
	set [1]					// Store array
							//
	ipush 1					// Start index
	set [2]					//
	jump WITH_I				//
	
WITH_I:
	get [2]					// Index
	get [1, 0]				// list.length
	eqi						// If all option checked
	jumpz WITH_I_NEXT WITH_I_END
	
WITH_I_NEXT:
	get [1]					// Array
	get [2]					// Index
	getr					// get A[i]
	set [0]					// i := next i
							//
	new 3					// With j frame
	newscope P WITH_J_INIT	//
	
WITH_I_INC:	
	get [2]					// Increment idx
	ipush 1					//
	addi					//
	set [2]					//
	jump WITH_I				// Goto next iteration
	
WITH_I_END:
	exitscope [P] MAIN_END	// Exit With I
	
	
WITH_J_INIT:
	new 4					// Create array
							//
	dup						// Array.length
	ipush 4					//
	setr [0]				//
							//
	dup						// First value
	ipush 1					//
	setr [1]				//
							//
	dup						// Second value
	ipush 2					//
	setr [2]				//
							//
	dup						// Third value
	ipush 3					//
	setr [3]				//
	set [1]					// Store array
							//
	ipush 1					// Index
	set [2]					//
	jump WITH_J				//
	
WITH_J:
	get [2]					// Index
	get [1, 0]				// list.length
	eqi						// If all option checked
	jumpz WITH_J_NEXT WITH_J_END
	
WITH_J_NEXT:
	get [1]					// Array
	get [2]					// Index
	getr					// A[idx]
	set [0]					// j := next j
							//
	get [0]					// j
	get [P, 0]				// i
	addi					//
	ipush 9					//
	eqi						// i + j == 9
	jumpz WITH_J_ASSERT_FALSE WITH_J_ASSERT_TRUE
	
WITH_J_ASSERT_TRUE:
	get [P, 0]				// i
	print					//
	get [0]					// j
	print					//
	jump WITH_J_ASSERT_FALSE
	
WITH_J_ASSERT_FALSE:
	get [2]					// Increment idx
	ipush 1					//
	addi					//
	set [2]					//
	jump WITH_J				// Goto next
	
WITH_J_END:
	exitscope [P] WITH_I_INC
	
MAIN_END:
	ipush 0					// Exitcode 0
	return					//
	