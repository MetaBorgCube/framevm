// Expects a dataframe with two strings, string at index [1] will be appended to string at index [0]
CONCAT:
	get [0, 0]			//Get length of first string.
	get [1, 0]  		//Get length of second string.
	addi       		 	//Compute total length of new string.
	dup         		//Duplicate total length to calculate string header with.
	ipush 1     		//Increment string length by one, in order to be able
	addi        		//to store new string length in header.
	newr        		//Create new string.
	dup         		//Duplicate new string.
	swap 2      		//Swap new string on stack with length of new string.
	setr [0]    		//Store string length in new string header, leaving the string on the stack.
	new 5       		//Create new dataframe to store new string, two old strings, and counter of which string.
	
	dup					//Put all items in new dataframe. Layout of dataframe:
	swap 2              // [0] First string
	setr [2]            // [1] Second string
	dup                 // [2] New string
	get [0]             // [3] Current string we are looping over
	setr [0]            // [4] Current index to which we are writing in the new string
	dup
	get [1]
	setr [1]
	dup
	ipush 0
	setr [3]
	dup
	ipush 0
	setr [4]
	
	mkcurrent          //Set previously created dataframe to current dataframe
	jump CONCAT_CHECK
	
CONCAT_CHECK:
	get [3]                         //Determine which string we will start to loop over.
	ipush 2                         //If we have finished looping over both strings
	eqi                             //jump to the end, if not concat the current string.
	jumpz CONCAT_STRING CONCAT_END
	
CONCAT_STRING:
	get [3]           //Get the string we will loop over.
	get
	getr [0]          //Get length of the string.
	ipush 0           //Get index of the string.
	jump CONCAT_LOOP  //Start looping.

CONCAT_LOOP:
	dup 2                                //If the length is equal to the current index,
	dup 2                                //stop looping. If not add the current character to the new string.
	eqi
	jumpz CONCAT_CHAR CONCAT_STRING_END

CONCAT_CHAR:
	ipush 1           //Increment index of character we want to get.
	addi
	dup
	get [3]           //Get character at index from string we are currently
	get               //looping over
	swap
	getr
	
	get [4]           //Get the index to which we want to write the character in the new string,
	ipush 1           //and write to that index.
	addi
	dup
	set [4]
	get [2]
	swap 2
	setr
	
	jump CONCAT_LOOP  //Go to next character

CONCAT_STRING_END:
	pop                //Pop index and string length from stack,
	pop                //as they are no longer needed. 
	get [3]            //Increment which string we want to loop over, as we have
	ipush 1            //finished looping over this string.
	addi
	set [3]
	jump CONCAT_CHECK  //Check if we want to loop again.

CONCAT_END:
	get [2]  //Return the newly created string
	return
