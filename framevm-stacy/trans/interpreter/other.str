module other

imports 
	signatures/framevm-stacy-sig
	signatures/fvm-common-sig
	interpreter/external
	
	stc-common

rules	// Other instructions

	// STC_Print/0
	// Print the value on top of the stack to the console
	eval: (STC_Print(), env1) -> env3
	  where
	  	(env2, val) := <stack-pop-any(|env1)>;
	  	(env3, out) := <vm-print(|env2)> <val-to-string> val;
	  	_ := <debug> out
	  	
	// STC_PrintString/0
	eval: (STC_PrintString(), env1) -> env3
	  where
	  	(env2, FrameRef(frame)) := <stack-pop-frame(|env1)>;
	  	size := <dec> <frame-size(|env2)> frame;
	  	<geq> (size, 1);
	  	<eq> (size, <string-length-slot> (frame, env2));
	  	vals := <reverse> <string-get-slots> (frame, size, env2);
	  	(env3, out) := <vm-print-chars(|env2)> vals;
	  	_ := <debug> out
	  	
	string-get-slots: (frame, 0, _) -> []
	string-get-slots: (frame, idx, env) -> [<string-to-int> n | <string-get-slots> (frame, <dec> idx, env)]
	  with
	  	IntV(n) := <frame-get-slot(|env)> (frame, <int-to-string> idx)
	  	
	string-get-slots: (frame, idx, _) -> <fail> <debug> $[Slot [idx] of [frame] does not contain an integer]
	string-get-slots: e-> <fail> <debug> e
	  	
	string-length-slot: (frame, env) -> <string-to-int> n
	  where
	  	IntV(n) := <frame-get-slot(|env)> (frame, "0")
	  	
	string-length-slot: (frame, env) -> <fail> <debug> $[First slot of [frame] does not contain an integer]

	// STC_PrintChar/0
	eval: (STC_PrintChar(), env1) -> env3
	  where
	  	(env2, IntV(val)) := <stack-pop-int(|env1)>;
	  	(env3, out) := <vm-print-chars(|env2)> [<string-to-int> val];
	  	_ := <debug> out
	  	
	// STC_Debug/0
	// Print the state of the vm to the console
	eval: (STC_Debug(), env1) -> env2
	  where
	  	env2 := <vm-debug(|env1)>
	  	
	// STC_DebugKill/0
	// Print the state of the vm to the console and terminate
	eval: (STC_DebugKill(), env1) -> <fail> env2
	  where
	  	env2 := <vm-debug(|env1)>
	
	// STC_StringPush/1
	// Push a string to the stack
	eval: (STC_StringPush(string), env1) -> env5
	  where
	    string' := <string-replace(|"\\n", "\n")> <string-replace(|"\\t", "\t")> string;
	  	chars := <explode-string> string';
	  	size := <length> chars;
	  	(env2, frame) :=  <frame-new(|env1)> <inc> size;
	  	env3 := <stack-push(|env2)> FrameRef(frame);
	  	env4 := <frame-set-slot(|env3)> (frame, "0", IntV(<int-to-string> size));
	  	(env5, _, _) := <foldl(char-store)> (chars, (env4, 1, frame))
	
	char-store: (char, (env1, idx, frame)) -> <debug>(env2, <inc> idx, frame)
	  where
	  	env2 := <frame-set-slot(|env1)> (frame, <int-to-string> idx, IntV(<int-to-string> char))
	  	
	char-store: e -> <fail> <debug> e
rules	// Util
	// Convert a value to a displayable string 
	val-to-string: IntV(v) -> v
	val-to-string: FrameRef(frame) -> frame
	val-to-string: Continuation(cont) -> cont
	val-to-string: ClosV(frame, FVM_Label(lbl)) -> (frame, lbl)
	
	
