module stc-interpreter

imports 
	signatures/framevm-stacy-sig
	interpreter/-
	stc-desugar
    
rules
  	eval-program: STC_Program(s, blocks, links) -> out
      where 
    	env1 := <vm-init> (links, 2, s);
      	env2 := <foldl(store-block)> (blocks, env1);
      	env3 := <store-block> (STC_Block(FVM_Label("_exit"), STC_Seq([])), env2);
      	env4 := <store-block> (STC_Block(FVM_Label("_catch"), STC_Seq([])), env3);
      	env5 := <vm-start(|env4)>;
    	env6 := <execute(|env5)>;
    	out  := <vm-stop(|env6)>
    	
    store-block: (STC_PseudoCode(_), env) -> env
  	store-block: (STC_Block(FVM_Label(lbl), STC_Seq(body)), env) -> <vm-store-block(|env)> (lbl, body)
    
    // Ask next instruction and evaluate it
    // Repeat until no instructions are left
  	execute(|env) = vm-execute(debug(!"execute: "); eval | env)
//  	execute(|env) = vm-execute(eval | env)

    // Instruction not implemented or execution failed
	// Catches current instructions and reports them
	eval: (instr, env) -> <fail>
	  where
	  	_ := <debug> ("Execution failed at instruction", instr)
