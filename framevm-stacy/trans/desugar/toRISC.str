module toRISC

imports
    signatures/framevm-stacy-sig
    signatures/fvm-common-sig
    stc-common
    
    interpreter/util

rules
    to-RISC-all: STC_Program(fn, i, s, a, blocks) -> STC_Program(fn, i, s, a, <map(to-RISC-all)> blocks)
    to-RISC-all: STC_PseudoCode(body) -> STC_PseudoCode(body)
    to-RISC-all: STC_Block(lbl, STC_Seq(body), d) -> STC_Block(lbl, STC_Seq(body_risc), d)
      where
        STC_Block(lbl, STC_Seq(body_risc)) := <to-RISC-all> STC_Block(lbl, STC_Seq(body))
    to-RISC-all: STC_Block(lbl, STC_Seq(body)) -> STC_Block(lbl, STC_Seq(body_risc))
      where
        body_risc := <to-RISC(r-toN)><to-RISC(r-stack-index)><to-RISC(r-relative)><to-RISC(r-new)><to-RISC(r-link)><to-RISC(r-cont)><to-RISC(r-scope)><to-RISC(r-string)> body
  
    // Boilerplate to make the desugaring step simpler
    to-RISC(s): x -> <foldr(![], (fpr(s) <+ idf))> x 
    fpr(s): (e, body) -> <concat> [<s>e, body]
    idf: (e, body) -> [e|body]
      
      // Link -> LinkR
    r-link: STC_Link(path, lbl)  -> [STC_Get(path),  STC_LinkR(lbl)]
    
    // New/0 -> New/1
    r-new: STC_New() -> [STC_New("0")]


    // Scope operations -> mkcurrent
    r-scope: STC_ScopeNew(link) ->
        [STC_Dup(),
         STC_Link(FVM_Self(), link),
         STC_ScopeSetCurrent()
        ]
        
    r-scope: STC_ScopeNew(link, lbl) ->
        [STC_Dup(),
         STC_Link(FVM_Self(), link),
         STC_ScopeSetCurrent(),
         STC_Jump(lbl)
        ]
         
    r-scope: STC_ScopeExit(path, lbl) -> 
        [STC_Get(path),
         STC_ScopeSetCurrent(),
         STC_Jump(lbl)
        ]
        
    r-scope: STC_ScopeExit(path) -> 
        [STC_Get(path),
         STC_ScopeSetCurrent()
        ]
        
        
    // Implicit STC_Continuations to explicit STC_Continuations
    r-cont: STC_Return() -> 
        [STC_ContTransfer("1", FVM_Cont(Bind("c", 0))), 
         STC_ContGet(FVM_Cont(Bind("c", 0))), 
         STC_ContReturn()
        ]
        
    r-cont: STC_ReturnN(n) -> 
        [STC_ContTransfer(n, FVM_Cont(Bind("c", 0))), 
         STC_ContGet(FVM_Cont(Bind("c", 0))), 
         STC_ContReturn()
        ]
        
    r-cont: STC_Call(FVM_Label(block), FVM_Label(returnAddr)) -> 
        [STC_ContNew(FVM_Label(block), "2"), 
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_Dup(), 
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContSetR(FVM_Cont(Bind("x", 1))), 
         STC_ContCall(FVM_Label(returnAddr))
        ]
    
    r-cont: STC_Call(FVM_Label(return)) -> 
        [STC_Dup(), 
         STC_ContGet(FVM_Cont(Bind("x", 1))), 
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContThis(), 
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_ContCall(FVM_Label(return))
        ]
        
    r-cont: STC_TailCall(FVM_Label(block)) -> 
        [STC_ContNew(FVM_Label(block), "2"), 
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_Dup(), 
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContSetR(FVM_Cont(Bind("x", 1))), 
         STC_ContReturn()
        ]
        
    r-cont: STC_TailCall() -> 
        [STC_Dup(), 
         STC_ContGet(FVM_Cont(Bind("x", 1))), 
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))), 
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_ContReturn()
        ]
         
    r-cont: STC_Try(lbl_try, lbl_catch, lbl_next) ->
        [STC_ContNew(lbl_catch, "3"),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         
         STC_Swap(),
         
         STC_ContNew(lbl_try, "3"),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_SwapN("2"),
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_ContCall(lbl_next)
        ]
    
    r-cont: STC_Try(lbl) ->
        [STC_DupN("2"),
         STC_Swap(),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_ContCall(lbl)
        ]
        
    r-cont: STC_Throw() -> 
        [STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContTransfer("1"),
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContReturn()
        ]
    
    r-cont: STC_Yield(lbl) -> 
        [STC_ContThis(),
         STC_Swap(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContTransfer("2"),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContCall(lbl)
        ]
    
    
    // STC_Continuations to relative STC_Continuations
    r-relative: STC_ContCopy(policy1, policy2)  -> [STC_ContThis(), STC_ContCopyR(policy1, policy2)]
    r-relative: STC_FrameCopy(policy) -> [STC_ScopeGetCurrent(), STC_FrameCopyR(policy)]
    
    r-relative: STC_ContGet(FVM_Cont(Bind(name, n))) -> [STC_IPush(<int-to-string> n), STC_ContGet()]
    r-relative: STC_ContGetR(FVM_Cont(Bind(name, n))) -> [STC_IPush(<int-to-string> n), STC_ContGetR()]
    
    r-relative: STC_ContSet(FVM_Cont(Bind(name, n))) -> [STC_IPush(<int-to-string> n), STC_Swap(), STC_ContSet()]
    r-relative: STC_ContSetR(FVM_Cont(Bind(name, n))) -> [STC_IPush(<int-to-string> n), STC_Swap(), STC_ContSetR()]
    
    // Get/Set unfolding to single segment paths and only relative gets/sets
    r-relative: STC_Get() -> [STC_ScopeGetCurrent(), STC_Swap(), STC_GetR()]
    r-relative: STC_Set() -> [STC_ScopeGetCurrent(), STC_SwapN("2"), STC_Swap(), STC_SetR()]
    
    r-relative: STC_Get(path) -> [STC_ScopeGetCurrent() | <r-relative> STC_GetR(path)]
    r-relative: STC_GetR(FVM_Path(path)) -> <foldr(![], r-relative-get)> path
    
    r-relative: STC_Set(FVM_Path(path)) -> <concat> [[STC_ScopeGetCurrent() | <r-relative> STC_GetR(FVM_Path(body))] , [STC_Swap(), STC_SetR(FVM_Path([last]))]]
      where
        (body, last) := <split-init-last> path
    r-relative: STC_SetR(FVM_Path(path)) -> <concat> [<r-relative> STC_GetR(FVM_Path(body)) , [STC_SetR(FVM_Path([last]))]]
      where
        (body, last) := <split-init-last> path
    
    r-relative-get: (e, list) -> [STC_GetR(FVM_Path([e])) | list]
    
    // Reduce relative gets and sets of slots to getR/0 and setR/0
    // I don't know why you would want to do this, but you can if you really want to
    r-stack-index: STC_New(n)                              -> [STC_IPush(n), STC_NewR()]
    r-stack-index: STC_GetR(FVM_Path([FVM_Slot(slot_id)])) -> [STC_IPush(slot_id), STC_GetR()]
    r-stack-index: STC_SetR(FVM_Path([FVM_Slot(slot_id)])) -> [STC_IPush(slot_id), STC_Swap(), STC_SetR()]
    
    r-toN: STC_Dup()  -> [STC_DupN("1")]
    r-toN: STC_Swap() -> [STC_SwapN("1")]
    
    
    r-string: STC_StringPush(string) -> <concat> [[
        STC_New(<int-to-string> <inc> length),
        STC_Dup(),
        STC_IPush(<int-to-string> length),
        STC_SetR(FVM_Path([FVM_Slot("0")]))], chars]
        
      where
        string' := <fix-string-escaping> string;
        length := <string-length> string';
        chars := <concat> <map-with-index(r-char)> <explode-string> string'
          
    r-char: (idx, char) -> [STC_Dup(), STC_IPush(<int-to-string> char), STC_SetR(FVM_Path([FVM_Slot(<int-to-string> idx)]))]
    
