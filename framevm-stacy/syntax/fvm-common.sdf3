module fvm-common

lexical syntax

  ID             = [a-zA-Z\_] [a-zA-Z0-9\_]*
  LABEL          = [A-Z\_] [A-Z0-9\_]* 
  CONTSLOT       = [a-z\_] [a-z0-9\_]* 
  INT            = "-"? [0-9]+ 
  INTLZ          = [1-9][0-9]* 
  INTLEZ         = [0-9]+ 
  BOOL			 = "true"
  BOOL			 = "false"
  
  STRING         = StringChar*
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

//  LABEL = 	"MAIN" 		{reject}
  ID = 		"addi" 		{reject}
  ID = 		"jump" 		{reject}
  ID = 		"jumpz" 	{reject}
  ID = 		"dup"	 	{reject}
  ID = 		"new"	 	{reject}
  ID = 		"pushi"	 	{reject}
  ID = 		"MAIN"	 	{reject}
  ID = 		"true"	 	{reject}
  ID = 		"false"	 	{reject}
  
  
lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  INTLZ         -/- [0-9]
  INTLEZ        -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  LABEL         -/- [A-Z0-9\_]
  CONTSLOT      -/- [a-z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
  
context-free syntax
  Label.FVM_Label = LABEL
  
  InitSize.FVM_InitSize = <#init <INTLEZ>>
  Alias.FVM_LinkAlias = <#link <LinkRef> -\> <INTLEZ>>
  Alias.FVM_ContAlias = <#cont <ContRef> -\> <INTLEZ>>
  Path.FVM_Self  = <[]>
  Path.FVM_Path  = <[<{PathRef ","}+>]>
  
  PathRef = SlotRef
  PathRef = LinkRef
  
  SlotRef.FVM_Slot    = INTLEZ
  LinkRef.FVM_Link    = LABEL
  LinkRef.FVM_LinkIdx = <_l<INTLEZ>>
    
  ContRef.FVM_Cont    = CONTSLOT
  ContRef.FVM_ContIdx = <_c<INTLEZ>>
  
  CopyPolicy.FVM_DeepCopy    = <deep>
  CopyPolicy.FVM_ShallowCopy = <shallow>
  
/* 

Values 

CodeV
- jump
- return 
- ...

IntV
- add
- pushi
- jumpz

BoolV
- true, false
- and 
- or

FrameRefV
- new
- set
- get 

closure =

Frame with code pointer + reference pointer

*/
  
/*

initialization of frame slots / soundness 

distinction between frame links and reference edges to frames 

well-formedness properties of instructions?

e.g. clean operand stack

*/



