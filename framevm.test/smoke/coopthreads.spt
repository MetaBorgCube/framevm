module smoke_add

language framevm

test threading example RISC [[#init 3
#cont p -> 0

MAIN:
	new 3
	dup
	ipush 2
	setr [0]

	dup
	new
	cnew THREAD1 1
	dup
	cthis
	csetr [p]
	setr [1]

	dup
	new
	cnew THREAD2 1
	dup
	cthis
	csetr [p]
	setr [2]

	set [0]
	ipush 0
	set [1]
	ipush 2
	set [2]

	jump SCHEDULER_NEXT

SCHEDULER_NEXT_0:
	rget 1
	pop
	jump SCHEDULER_NEXT
	
SCHEDULER_NEXT:
	get [2]
	jumpz SCHEDULER_EXIT SCHEDULER_NEXT_2

SCHEDULER_NEXT_2:
	get [1]
	get [0, 0]
	eqi
	jumpz SCHEDULER_NEXT_INC SCHEDULER_NEXT_FIRST
	
SCHEDULER_AFTER_PAUSE:
	rget 1
	jumpz SCHEDULER_REMOVE SCHEDULER_NEXT_0
	
SCHEDULER_REMOVE:
	rget 1
	get [0]
	swap
	ipush 0
	setr

	get [2]
	ipush 1
	subi
	set [2]

	jump SCHEDULER_NEXT
	
SCHEDULER_NEXT_FIRST:
	ipush 0
	set [1]
	jump SCHEDULER_NEXT_INC
		
SCHEDULER_NEXT_INC:
	get [1]
	dup
	ipush 1
	addi
	set [1]

	get [0]
	swap
	ipush 1
	addi
	getr
	dup
	cont?
	jumpz SCHEDULER_SKIP SCHEDULER_EXECUTE
	
SCHEDULER_SKIP:
	pop
	jump SCHEDULER_NEXT_2
	
SCHEDULER_EXECUTE:
	ccall SCHEDULER_AFTER_PAUSE
	
SCHEDULER_EXIT:
	jump MAIN_END
	
THREAD1:
	ipush 0
	jump THREAD1_CONT
	
THREAD1_CONT:
    ipush 1
    print

    dup
    print
    ipush 1
    addi
    dup
    ipush 9
    eqi
    jumpz THREAD1_NEXT THREAD1_EXIT

THREAD1_NEXT:
    ipush 1
    ipush 1
    transfer 2 [p]
    cget [p]
    ccall THREAD1_CONT

THREAD1_EXIT:
    pop
    ipush 1
    ipush 0
    transfer 2 [p]
    cget [p]
    cret
    
THREAD2:
	ipush 0
	jump THREAD2_CONT
	
THREAD2_CONT:
    ipush 2
    print

    dup
    print
    ipush 1
    addi
    dup
    ipush 4
    eqi
    jumpz THREAD2_NEXT THREAD2_EXIT

THREAD2_NEXT:
    ipush 2
    ipush 1
    transfer 2 [p]
    cget [p]
    ccall THREAD2_CONT

THREAD2_EXIT:
    pop
    ipush 2
    ipush 0
    transfer 2 [p]
    cget [p]
    cret
    
MAIN_END:
	ipush 0
	return
]] transform "Run -> RISC" to "1
0
2
0
1
1
2
1
1
2
2
2
1
3
2
3
1
4
1
5
1
6
1
7
1
8"

test Threading example CISC [[#init 3
#cont p -> 0

MAIN:
	new 3
	dup
	ipush 2
	setr [0]

	dup
	new
	cnew THREAD1 1
	dup
	cthis
	csetr [p]
	setr [1]

	dup
	new
	cnew THREAD2 1
	dup
	cthis
	csetr [p]
	setr [2]

	set [0]
	ipush 0
	set [1]
	ipush 2
	set [2]

	jump SCHEDULER_NEXT

SCHEDULER_NEXT_0:
	rget 1
	pop
	jump SCHEDULER_NEXT
	
SCHEDULER_NEXT:
	get [2]
	jumpz SCHEDULER_EXIT SCHEDULER_NEXT_2

SCHEDULER_NEXT_2:
	get [1]
	get [0, 0]
	eqi
	jumpz SCHEDULER_NEXT_INC SCHEDULER_NEXT_FIRST
	
SCHEDULER_AFTER_PAUSE:
	rget 1
	jumpz SCHEDULER_REMOVE SCHEDULER_NEXT_0
	
SCHEDULER_REMOVE:
	rget 1
	get [0]
	swap
	ipush 0
	setr

	get [2]
	ipush 1
	subi
	set [2]

	jump SCHEDULER_NEXT
	
SCHEDULER_NEXT_FIRST:
	ipush 0
	set [1]
	jump SCHEDULER_NEXT_INC
		
SCHEDULER_NEXT_INC:
	get [1]
	dup
	ipush 1
	addi
	set [1]

	get [0]
	swap
	ipush 1
	addi
	getr
	dup
	cont?
	jumpz SCHEDULER_SKIP SCHEDULER_EXECUTE
	
SCHEDULER_SKIP:
	pop
	jump SCHEDULER_NEXT_2
	
SCHEDULER_EXECUTE:
	ccall SCHEDULER_AFTER_PAUSE
	
SCHEDULER_EXIT:
	jump MAIN_END
	
THREAD1:
	ipush 0
	jump THREAD1_CONT
	
THREAD1_CONT:
    ipush 1
    print

    dup
    print
    ipush 1
    addi
    dup
    ipush 9
    eqi
    jumpz THREAD1_NEXT THREAD1_EXIT

THREAD1_NEXT:
    ipush 1
    ipush 1
    transfer 2 [p]
    cget [p]
    ccall THREAD1_CONT

THREAD1_EXIT:
    pop
    ipush 1
    ipush 0
    transfer 2 [p]
    cget [p]
    cret
    
THREAD2:
	ipush 0
	jump THREAD2_CONT
	
THREAD2_CONT:
    ipush 2
    print

    dup
    print
    ipush 1
    addi
    dup
    ipush 4
    eqi
    jumpz THREAD2_NEXT THREAD2_EXIT

THREAD2_NEXT:
    ipush 2
    ipush 1
    transfer 2 [p]
    cget [p]
    ccall THREAD2_CONT

THREAD2_EXIT:
    pop
    ipush 2
    ipush 0
    transfer 2 [p]
    cget [p]
    cret
    
MAIN_END:
	ipush 0
	return
]] transform "Run -> CISC" to "1
0
2
0
1
1
2
1
1
2
2
2
1
3
2
3
1
4
1
5
1
6
1
7
1
8"