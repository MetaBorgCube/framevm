module rgr_interpreter_control

language framevm

fixture [[#init 2
MAIN:
	local := 99
	[[...]]
MAIN_END1:
	r0 <- rget(cgetcurrent())
	print(iload(1))
	print(r0)
	return(iload(0))
MAIN_END2:
	local := 1
	r0 <- rget(cgetcurrent())
	print(iload(2))
	print(r0)
	return(iload(0))
]]

test call frame 1 [[
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	call(r0, FUNC, MAIN_END)
FUNC:
	local := 2
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget(cgetcurrent())
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test call frame 2 [[
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	r0 <- cnew(r0, FUNC, 2)
	call(r0, MAIN_END)
FUNC:
	local := 2
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget(cgetcurrent())
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test call frame throw [[
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	r1 <- cnew(new(), MAIN_END2, 2)
	cset(x, r1)
	cset(r1, c, cget(c))
	call(r0, FUNC, MAIN_END1)
FUNC:
	local := 0
	throw(get([0]))
]] transform "Run -> Run" to "IntV(2)
IntV(1)"



test tailcall frame 1 [[
	call(new(), MAIN2, MAIN_END)
MAIN2:
	local := 1
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	tailcall(r0, FUNC)
FUNC:
	local := 2
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget(cgetcurrent())
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test call frame 2 [[
	call(new(), MAIN2, MAIN_END)
MAIN2:
	local := 1
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	r0 <- cnew(r0, FUNC, 2)
	tailcall(r0)
FUNC:
	local := 2
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget(cgetcurrent())
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test jump [[
	jump(MAIN2)
MAIN2:
	print(iload(1))
	jump(MAIN3)
MAIN3:
	print(iload(2))
	jump(MAIN4)
MAIN4:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(2)
IntV(3)"

test conditional jump then [[
	jumpz(iload(0), MAIN2, MAIN3)
MAIN2:
	print(iload(1))
	return(iload(0))
MAIN3:
	print(iload(2))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)"

test conditional jump else [[
	jumpz(iload(1), MAIN2, MAIN3)
MAIN2:
	print(iload(1))
	return(iload(0))
MAIN3:
	print(iload(2))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)"



test try fallthrough [[
	try(new(), TRY, new(), CATCH, END)
TRY:
	local := 0
	print(iload(1))
	cret(cget(n))
CATCH:
	local := 0
	print(iload(2))
	cret(cget(n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(3)"

test try catch [[
	try(new(), TRY, new(), CATCH, END)
TRY:
	local := 0
	throw(iload(2))
CATCH:
	local := 1
	r0 <- rget(cgetcurrent())
	print(r0)
	cret(cget(n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)
IntV(3)"

test try return [[
	call(new(), FUNC, MAIN_END)
FUNC:
	try(new(), TRY, new(), CATCH, END)
TRY:
	local := 0
	print(iload(1))
	return(iload(4))
CATCH:
	local := 0
	print(iload(2))
	cret(cget(n))
END:
	print(iload(3))
	return(iload(0))
MAIN_END:
	r0 <- rget(cgetcurrent())
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(4)"


test try fallthrough 2 [[
	try(cnew(new(), TRY, 3), cnew(new(), CATCH, 3), END)
TRY:
	local := 0
	print(iload(1))
	cret(cget(n))
CATCH:
	local := 0
	print(iload(2))
	cret(cget(n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(3)"

test try catch 2 [[
	try(cnew(new(), TRY, 3), cnew(new(), CATCH, 3), END)
TRY:
	local := 0
	throw(iload(2))
CATCH:
	local := 1
	r0 <- rget(cgetcurrent())
	print(r0)
	cret(cget(n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)
IntV(3)"

test try return 2 [[
	call(new(), FUNC, MAIN_END)
FUNC:
	try(cnew(new(), TRY, 3), cnew(new(), CATCH, 3), END)
TRY:
	local := 0
	print(iload(1))
	return(iload(4))
CATCH:
	local := 0
	print(iload(2))
	cret(cget(n))
END:
	print(iload(3))
	return(iload(0))
MAIN_END:
	r0 <- rget(cgetcurrent())
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(4)"