module rgr_interpreter_control

language framevm

fixture [[#init 2
#registers 2
#cont $n -> 2

MAIN:
	[[...]]
MAIN_END1:
	r0 <- rget()
	print(iload(1))
	print(r0)
	return(iload(0))
MAIN_END2:
	r0 <- rget()
	print(iload(2))
	print(r0)
	return(iload(0))
]]

test call frame 1 [[
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	call(r0, FUNC, MAIN_END)
FUNC:
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget()
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test call frame 2 [[
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	r0 <- newC(newCF(r0), FUNC)
	call(r0, MAIN_END)
FUNC:
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget()
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test call frame throw [[
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	r1 <- newC(newCF(new()), MAIN_END2)
	setC($x, r1)
	setC(unpackC(r1), $c, getC($c))
	call(r0, FUNC, MAIN_END1)
FUNC:
	throw(get([0]))
]] transform "Run -> Run" to "IntV(2)
IntV(1)"



test tailcall frame 1 [[
	call(new(), MAIN2, MAIN_END)
MAIN2:
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	tailcall(r0, FUNC)
FUNC:
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget()
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test call frame 2 [[
	call(new(), MAIN2, MAIN_END)
MAIN2:
	r0 <- new(2)
	set(r0, [0], iload(1))
	set(r0, [1], iload(3))
	r0 <- newC(newCF(r0), FUNC)
	tailcall(r0)
FUNC:
	r0 <- get([0])
	r1 <- get([1])
	return(addi(r0, r1))
MAIN_END:
	r0 <- rget()
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)"

test jump [[
	jump(MAIN2)
MAIN2:
	print(iload(1))
	jump(MAIN3)
MAIN3:
	print(iload(2))
	jump(MAIN4)
MAIN4:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(2)
IntV(3)"

test conditional jump then [[
	jumpz(iload(0), MAIN2, MAIN3)
MAIN2:
	print(iload(1))
	return(iload(0))
MAIN3:
	print(iload(2))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)"

test conditional jump else [[
	jumpz(iload(1), MAIN2, MAIN3)
MAIN2:
	print(iload(1))
	return(iload(0))
MAIN3:
	print(iload(2))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)"



test try fallthrough [[
	try(new(), TRY, new(), CATCH, END)
TRY:
	print(iload(1))
	callC(getC($n))
CATCH:
	print(iload(2))
	callC(getC($n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(3)"

test try catch [[
	try(new(), TRY, new(), CATCH, END)
TRY:
	throw(iload(2))
CATCH:
	r0 <- rget()
	print(r0)
	callC(getC($n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)
IntV(3)"

test try return [[
	call(new(), FUNC, MAIN_END)
FUNC:
	try(new(), TRY, new(), CATCH, END)
TRY:
	print(iload(1))
	return(iload(4))
CATCH:
	print(iload(2))
	callC(getC($n))
END:
	print(iload(3))
	return(iload(0))
MAIN_END:
	r0 <- rget()
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(4)"


test try fallthrough 2 [[
	try(newC(newCF(new()), TRY), newC(newCF(new()), CATCH), END)
TRY:
	print(iload(1))
	callC(getC($n))
CATCH:
	print(iload(2))
	callC(getC($n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(3)"

test try catch 2 [[
	try(newC(newCF(new()), TRY), newC(newCF(new()), CATCH), END)
TRY:
	throw(iload(2))
CATCH:
	r0 <- rget()
	print(r0)
	callC(getC($n))
END:
	print(iload(3))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)
IntV(3)"

test try return 2 [[
	call(new(), FUNC, MAIN_END)
FUNC:
	try(newC(newCF(new()), TRY), newC(newCF(new()), CATCH), END)
TRY:
	print(iload(1))
	return(iload(4))
CATCH:
	print(iload(2))
	callC(getC($n))
END:
	print(iload(3))
	return(iload(0))
MAIN_END:
	r0 <- rget()
	print(r0)
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)
IntV(4)"

test conditional call then [[
	r0 <- newC(newCF(new()), MAIN2)
	r1 <- newC(newCF(new()), MAIN3) 
	callCz(iload(0), r0, r1)
MAIN2:
	print(iload(1))
	return(iload(0))
MAIN3:
	print(iload(2))
	return(iload(0))
]] transform "Run -> Run" to "IntV(1)"

test conditional call then with [[
	r0 <- newC(newCF(new()), MAIN2)
	r1 <- newC(newCF(new()), MAIN3) 
	callCz(iload(0), r0, r1, iload(2), iload(3))
MAIN2:
	print(iload(4))
	print(rget())
	print(rget())
	return(iload(0))
MAIN3:
	print(rget())
	print(rget())
	print(iload(1))
	return(iload(0))
]] transform "Run -> Run" to "IntV(4)
IntV(3)
IntV(2)"

test conditional jump else [[
	r0 <- newC(newCF(new()), MAIN2)
	r1 <- newC(newCF(new()), MAIN3) 
	callCz(iload(1), r0, r1)
MAIN2:
	print(iload(1))
	return(iload(0))
MAIN3:
	print(iload(2))
	return(iload(0))
]] transform "Run -> Run" to "IntV(2)"

test conditional call else with [[
	r0 <- newC(newCF(new()), MAIN2)
	r1 <- newC(newCF(new()), MAIN3) 
	callCz(iload(1), r0, r1, iload(2), iload(3))
MAIN2:
	print(iload(4))
	print(rget())
	print(rget())
	return(iload(0))
MAIN3:
	print(rget())
	print(rget())
	print(iload(1))
	return(iload(0))
]] transform "Run -> Run" to "IntV(3)
IntV(2)
IntV(1)"