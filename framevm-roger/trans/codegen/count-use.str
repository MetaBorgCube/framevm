module count-use

imports
	signatures/frameRvm-sig
	signatures/expressions-sig
	desugar
    
rules
  	count-use: RGR_Program(s, l, blocks) -> RGR_Program(s, l, <map(count-use)> blocks)
 	count-use: f@RGR_PseudoCode(body) -> f
  	count-use: RGR_Block(lbl, body) -> RGR_Block(lbl, <count-use> body)
  	count-use: Seq(body) -> Seq(body, vars)
  	  where
  	  	vars := <foldl(count-use-instr)> (body, [])
  
  	count-use-instr: (Nop(), vars) -> vars
  	count-use-instr: (Control(control), vars) -> <count-use-control> (control, vars)
  	count-use-instr: (Control(control, refs), vars) -> <count-use-refs>(refs, <count-use-control> (control, vars))
  	count-use-instr: (RGR_PathAlias(name, exp), v) -> <append-vars> (v, name, exp)
  	
  	count-use-instr: (Terminal(exp, pure), vars)    -> <count-use-exp> (exp, vars)
  	count-use-instr: (Assign(ids, exp, pure), vars) -> <append-vars> (<count-use-exp> (exp, vars), [ids], pure, exp)
  	count-use-instr: (OnReturn(ids, exp), vars) -> <append-vars> (<count-use-exp> (exp, vars), ids, 1, exp)
  	
  	append-vars: (vars, [], _, _) -> vars
  	append-vars: (vars, [name | t], is_pure, exp) -> [ (name, 0, is_pure, exp) | <append-vars> (vars, t, is_pure, exp)]
  	append-vars: (vars, name, exp) -> [ (name, 0, -1, exp) | vars]
  	
  	count-use-refs: (refs, vars) -> <foldl(count-use-ref)> (refs, vars)
  
  	count-use-ref: (ref_id, []) -> <fail> where <debug> $[Undefined: [ref_id]]
  	count-use-ref: (ref_id, [(ref_id, count, pure, exp)| vars]) -> [(ref_id, <inc> count, pure, exp)| vars]
  	count-use-ref: (ref_id, [h| vars]) -> [h| <count-use-ref>(ref_id, vars)]
  
  
  	count-use-exp: (RGR_Ref(name), v) -> <count-use-ref> (name, v)
  	
  	count-use-exp: (RGR_IPush(_), v) -> v
	count-use-exp: (RGR_INeg(exp), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_IAdd(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))

	count-use-exp: (RGR_IMul(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_ISub(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_IDiv(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_IMod(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	
	count-use-exp: (RGR_IEq(exp1, exp2), v)  -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_ILt(exp1, exp2), v)  -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_IGt(exp1, exp2), v)  -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_IOr(exp1, exp2), v)  -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_IXor(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_IAnd(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))

	count-use-exp: (RGR_IsInt(exp), v)   -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_IsCont(exp),v)   -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_IsFrame(exp), v) -> <count-use-exp> (exp, v)
	
	count-use-exp: (IntLEZ(_), v) -> v
	count-use-exp: (RGR_New(exp), v) -> <count-use-exp> (exp, v)
	
	count-use-exp: (RGR_New(), v) -> v
	
	count-use-exp: (RGR_Link(exp1, exp2,_), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	
 
	count-use-exp: (RGR_Set(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_SetR(exp1, exp2, exp3), v) -> <count-use-exp> (exp3, <count-use-exp> (exp2, (<count-use-exp> (exp1, v))))
	count-use-exp: (RGR_Get(exp), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_GetR(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	
	count-use-exp: (RGR_ContThis(), v) -> v
	count-use-exp: (RGR_ContNew(_, _), v) -> v
	count-use-exp: (RGR_ContTransfer(exp, _), v) -> <count-use-exp> (exp, v)
	
	count-use-exp: (RGR_ContSet(_, exp), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_ContRGet(_), v) -> v
	count-use-exp: (RGR_ContSetR(exp1, _, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-exp: (RGR_ContGet(exp), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_ContGetR(exp1, exp2), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))

	count-use-exp: (RGR_ScopeExit(_), v) -> v
	count-use-exp: (RGR_ScopeNew(exp, _), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_ScopeSetCurrent(exp), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_Print(exp), v) -> <count-use-exp> (exp, v)
	count-use-exp: (RGR_Debug(), v) -> v
	
	count-use-exp: (RGR_Path(_), v) -> v
	count-use-exp: (RGR_Self(), v) -> v
	
  	
  
  	
	count-use-control: (RGR_Return(exps), v) -> <foldl(count-use-exp)> (exps, v)
	count-use-control: (RGR_Yield(exps, _), v) -> <foldl(count-use-exp)> (exps, v)
	count-use-control: (RGR_JumpZ(exp, _, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_Jump(_), v) -> v
	count-use-control: (RGR_Call(exp, _, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_Call(exp, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_TailCall(exp, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_TailCall(exp), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_ContCall(exp, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_ContReturn(exp, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_ContReturn(exp), v) -> <count-use-exp> (exp, v)
	
	count-use-control: (RGR_Try(exp1, _, exp2, _, _), v) -> <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-control: (RGR_Try(exp1, exp2, _), v) ->  <count-use-exp> (exp2, (<count-use-exp> (exp1, v)))
	count-use-control: (RGR_Throw(exp), v) -> <count-use-exp> (exp, v)
	
	count-use-control: (RGR_ScopeExit(exp, _), v) -> <count-use-exp> (exp, v)
	count-use-control: (RGR_ScopeNew(exp, _, _), v) -> <count-use-exp> (exp, v)

