module analysis/static-semantics

imports

  signatures/-

rules

  init ^ (s) := new s.

  [[RGR_Program(_, _, blocks) ^ (s) ]] :=
    Map1(block)[[blocks ^(s)]].
  	
//  block[[RGR_PseudoCode(_) ^(s)]].
  
  block[[RGR_Block(FVM_Label(name), Seq(body)) ^(s)]] := 
    new block, 
    Block{name} <- s,
    distinct/name D(s)/Block | error $[Redefinition of label] @NAMES,
    Block{name} ===> block,
    block ---> s,
    instr[[body ^(block)]].
  	

  lbl[[FVM_Label(name) ^(s)]] :=
    Block{name} -> s,
    Block{name} |-> d | error $[Unknown jump label [name]] @name.
    
  ref[[name ^(s)]] :=
    Var{name} -> s,
    Var{name} |-> d | error $[Unknown reference [name]] @name.
  	

  bind[[name ^(s)]] :=
    Var{name} <- s,
    distinct/name W(s)/Var | error $[Redefinition of variable] @name.
  
   
  instr[[ [Assign(ids, exp, pure) | tail] ^(s)]] :=
    bind[[ids ^(s)]],
	exp[[exp ^(s)]],
	new bs, bs ---> s,
	instr[[tail ^(bs)]],
    pure == 0 | note $[impure] @exp.
  	
  instr[[ [Terminal(exp, pure) | tail] ^(s)]] :=
    exp[[ exp ^(s)]],
    instr[[ tail ^(s)]].	// Terminals cannot be shuffled anyways, so no need to check if it is pure
   
  instr[[ [RGR_PathAlias(id, path) | tail] ^(s)]] :=
    bind[[id ^(s)]],
    new bs, bs ---> s,
    instr[[tail ^(bs)]].
   
  instr[[ [Control(exp)] ^(s)]] :=
    exp[[ exp ^(s)]].
  	
  instr[[ [Control(exp, refs)] ^(s)]] :=
    exp[[ exp ^(s)]],
    Map1(exp)[[refs ^(s)]].
    
  instr[[ [OnReturn(ids, _) | tail] ^(s)]] :=
    Map1(bind)[[ids ^(s)]],
    instr[[tail ^(s)]].
  	
  	  
  exp[[IntLEZ(_) ^(s)]].
  exp[[FVM_Path(_) ^(s)]].
  exp[[RGR_Ref(name) ^(s)]] :=
    ref [[name ^(s)]].
  
  exp[[ RGR_IPush(n) ^(s) ]].
  exp[[ RGR_INeg(exp) ^(s) ]] := exp[[ exp ^(s) ]].
  
  exp[[ RGR_IAdd(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IMul(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_ISub(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IDiv(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IMod(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
	
  exp[[ RGR_IEq(exp1, exp2) ^(s) ]]  :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_ILt(exp1, exp2) ^(s) ]]  :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IGt(exp1, exp2) ^(s) ]]  :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IOr(exp1, exp2) ^(s) ]]  :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IXor(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_IAnd(exp1, exp2) ^(s) ]] :=  exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].

  exp[[ RGR_IsInt(exp) ^(s) ]]   := exp[[ exp ^(s) ]].
  exp[[ RGR_IsCont(exp) ^(s) ]]  := exp[[ exp ^(s) ]].
  exp[[ RGR_IsFrame(exp) ^(s) ]] := exp[[ exp ^(s) ]].
	
  exp[[ RGR_New(exp) ^(s) ]] := exp[[ exp ^(s) ]].
  exp[[ RGR_New() ^(s) ]].
	
  exp[[ RGR_Link(exp, path, ref) ^(s) ]] := exp[[ exp ^(s) ]].
 
  exp[[ RGR_Set(exp1, exp2) ^(s) ]] := exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_SetR(exp1, exp2, exp3) ^(s) ]] := exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]], exp[[ exp3 ^(s) ]].
  exp[[ RGR_Get(exp) ^(s) ]] := exp[[ exp ^(s) ]].
  exp[[ RGR_GetR(exp1, exp2) ^(s) ]] := exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].	

  exp[[ RGR_ContRGet(_) ^(s) ]].
  exp[[ RGR_ContThis() ^(s) ]].
  exp[[ RGR_ContNew(lbl, _) ^(s) ]] := lbl[[lbl ^(s) ]].
  exp[[ RGR_ContTransfer(exp, _) ^(s) ]] := exp[[ exp ^(s) ]].
	
  exp[[ RGR_ContSet(_, exp) ^(s) ]] := exp[[ exp ^(s) ]].
  exp[[ RGR_ContSetR(exp1, _, exp2) ^(s) ]] := exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]].
  exp[[ RGR_ContGet(_) ^(s) ]].
  exp[[ RGR_ContGetR(exp, _) ^(s) ]] := exp[[ exp ^(s) ]].
	
	
  exp[[ RGR_Return(exps) ^(s) ]] := Map1(exp)[[ exps ^(s) ]].
  exp[[ RGR_Yield(exps, lbl) ^(s) ]] := Map1(exp) [[exps ^(s) ]], lbl [[ lbl ^(s) ]].
  exp[[ RGR_JumpZ(exp, lbl1, lbl2) ^(s) ]] := exp[[ exp ^(s) ]], lbl [[ lbl1 ^(s) ]], lbl [[ lbl2 ^(s) ]].
  exp[[ RGR_Jump(lbl) ^(s) ]] := lbl [[ lbl ^(s) ]].
  exp[[ RGR_Call(exp, lbl1, lbl2) ^(s) ]] := exp[[ exp ^(s) ]], lbl [[ lbl1 ^(s) ]], lbl [[ lbl2 ^(s) ]].
  exp[[ RGR_Call(exp, lbl) ^(s) ]] := exp[[ exp ^(s) ]], lbl [[ lbl ^(s) ]].
  exp[[ RGR_TailCall(exp, lbl) ^(s) ]] := exp[[ exp ^(s) ]], lbl [[ lbl ^(s) ]].
  exp[[ RGR_TailCall(exp) ^(s) ]] := exp [[ exp ^(s) ]].
  exp[[ RGR_ContCall(exp, lbl) ^(s) ]] := exp[[ exp ^(s) ]], lbl [[ lbl ^(s) ]].
  exp[[ RGR_ContReturn(exp, _) ^(s) ]] := exp [[ exp ^(s) ]].
  exp[[ RGR_ContReturn(exp) ^(s) ]] := exp [[ exp ^(s) ]].
	
  exp[[ RGR_Try(exp1, lbl1, exp2, lbl2, lbl3) ^(s) ]] := 
  	exp[[ exp1 ^(s) ]], exp[[ exp2 ^(s) ]],
  	lbl [[ lbl1 ^(s) ]], lbl [[ lbl2 ^(s) ]], lbl [[ lbl3 ^(s) ]].
  	
  exp[[ RGR_Throw(exp) ^(s) ]] := exp[[ exp ^(s) ]].
	
  exp[[ RGR_ScopeExit(_) ^(s) ]].
  exp[[ RGR_ScopeNew(exp, _) ^(s) ]] := exp[[ exp ^(s) ]].
  exp[[ RGR_ScopeExit(_, lbl) ^(s) ]] := lbl [[ lbl ^(s) ]].
  exp[[ RGR_ScopeNew(exp, _, lbl) ^(s) ]] := exp[[ exp ^(s) ]], lbl [[ lbl ^(s) ]].
  exp[[ RGR_ScopeSetCurrent(exp) ^(s) ]] := exp[[ exp ^(s) ]].
  exp[[ RGR_Print(exp) ^(s) ]] := exp[[ exp ^(s) ]].
  exp[[ RGR_Debug() ^(s) ]].
