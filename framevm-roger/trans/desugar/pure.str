module pure

imports
	signatures/frameRvm-sig
	signatures/expressions-sig
	desugar
    
rules
  	detect-pure: RGR_Program(s, l, blocks) -> RGR_Program(s, l, <map(detect-pure)> blocks)
 	detect-pure: RGR_PseudoCode(body) -> RGR_PseudoCode(body)
  	detect-pure: RGR_Block(lbl, body) -> RGR_Block(lbl, <detect-pure> body)
  	detect-pure: Seq(body) -> Seq(<map(detect-pure-instr)> body)
  
  
  	detect-pure-instr: f@Control(_) -> f
  	detect-pure-instr: f@Control(_, _) -> f
  	detect-pure-instr: f@RGR_PathAlias(_, _) -> f
  	detect-pure-instr: f@OnReturn(_, _) -> f
  	
  	detect-pure-instr: RGR_Terminal(exp) -> Terminal(exp, <detect-pure-exp> exp)
  	detect-pure-instr: RGR_Assign(ids, exp) -> Assign(ids, exp, <detect-pure-exp> exp)
  	detect-pure-instr: RGR_PureAssign(ids, exp) -> Assign(ids, exp, 0)
  
  
  	detect-pure-exp: RGR_IPush(_) -> 0
  	detect-pure-exp: RGR_Ref(_) -> 0
	detect-pure-exp: RGR_INeg(exp) -> <detect-pure-exp> exp
	detect-pure-exp: RGR_IAdd(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)

	detect-pure-exp: RGR_IMul(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_ISub(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_IDiv(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_IMod(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	
	detect-pure-exp: RGR_IEq(exp1, exp2)  -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_ILt(exp1, exp2)  -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_IGt(exp1, exp2)  -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_IOr(exp1, exp2)  -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_IXor(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)
	detect-pure-exp: RGR_IAnd(exp1, exp2) -> <addi> (<detect-pure-exp> exp1, <detect-pure-exp> exp2)

	detect-pure-exp: RGR_IsInt(exp)   -> <detect-pure-exp> exp
	detect-pure-exp: RGR_IsCont(exp)  -> <detect-pure-exp> exp
	detect-pure-exp: RGR_IsFrame(exp) -> <detect-pure-exp> exp
	
	detect-pure-exp: IntLEZ(_) -> 0
	detect-pure-exp: RGR_New(exp) -> <detect-pure-exp> exp
	
	detect-pure-exp: RGR_New() -> 0
	
	detect-pure-exp: RGR_Link(_, _,_) -> 1
	
 
	detect-pure-exp: RGR_Set(_, _) -> 1
	detect-pure-exp: RGR_SetR(_,_,_) -> 1
	detect-pure-exp: RGR_Get(_) -> 1
	detect-pure-exp: RGR_GetR(_, _) -> 1		

	detect-pure-exp: RGR_ContThis() -> 0
	detect-pure-exp: RGR_ContNew(_, _) -> 0
	detect-pure-exp: RGR_ContTransfer(_, _) -> 1
	
	detect-pure-exp: RGR_ContSet(_,_) -> 1
	detect-pure-exp: RGR_ContSetR(_, _, _) -> 1
	detect-pure-exp: RGR_ContGet(_) -> 1
	detect-pure-exp: RGR_ContGetR(_, _) -> 1

	detect-pure-exp: RGR_ScopeExit(_) -> 1
	detect-pure-exp: RGR_ScopeNew(_, _) -> 1
	detect-pure-exp: RGR_ScopeSetCurrent(_) -> 1
	detect-pure-exp: RGR_Print(_) -> 1	
	detect-pure-exp: RGR_Debug() -> 1	  
  
  
  	resugar-pure = topdown(try(resugar-pure-instr))
  	
  	resugar-pure-instr: Seq(body, _) -> Seq(body)
  	resugar-pure-instr: Terminal(exp, _) -> RGR_Terminal(exp)
  	resugar-pure-instr: Assign(ids, exp, 0) -> RGR_PureAssign(ids, exp)
  	resugar-pure-instr: Assign(ids, exp, _) -> RGR_Assign(ids, exp)
  	
  	
