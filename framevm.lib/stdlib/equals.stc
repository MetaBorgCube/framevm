export EQUALS as equals

// Given a dataframe of size two, compare the two items in the dataframe
//
// Returns 1 if they are equal
// Returns 0 otherwise
// Original by @Geweldig

EQUALS:
	stack := 4
	get[0]
	get[1]
	eqr
	jumpz __EQUALS_CONTENT __RETURN_TRUE	// Return true when the same reference
	
__EQUALS_CONTENT:
	get [0]
	frame?
	jumpz __VAR1_IS_INT __VAR1_IS_FRAME

__VAR1_IS_INT:
	get [1]
	frame?
	jumpz __COMPARE_INTS __RETURN_FALSE
	
__VAR1_IS_FRAME:
	get [1]
	frame?
	jumpz __RETURN_FALSE __VAR2_IS_FRAME
	
__VAR2_IS_FRAME:
	get [0]
	size
	get [1]
	size
	eqi
	jumpz __RETURN_FALSE __EQUAL_LENGTH

__EQUAL_LENGTH:
	new 1
	newscope P
	ipush 0
	set [0]
	jump __COMPARE_FRAMES

__COMPARE_INTS:
	get [0]
	get [1]
	eqi
	return

__COMPARE_FRAMES:
	get [P, 0]
	size
	get [0]
	eqi
	jumpz __COMPARE_IDX __RETURN_TRUE
	
__COMPARE_IDX:
	get [P, 0]
	get [0]
	emptyr?
	jumpz __COMPARE_IDX_F_NE __COMPARE_IDX_F_E

__COMPARE_IDX_F_NE:
	get[P, 1]
	get [0]
	emptyr?
	jumpz __COMPARE_IDX_S_NE __RETURN_FALSE

__COMPARE_IDX_F_E:
	get[P, 1]
	get [0]
	emptyr?
	jumpz __RETURN_FALSE __EQUAL_IDX

__COMPARE_IDX_S_NE:		
	new 2
	get [0]
	get [P, 0]
	dup 2
	getr
	
	get [P, 1]
	swap
	swap 2
	getr
	
	dup 3
	swap
	setr [1]
	
	dup 2
	swap
	setr [0]
	
	call EQUALS __COMPARED_IDX
	
__COMPARED_IDX:
	rget
	jumpz __RETURN_FALSE __EQUAL_IDX

__EQUAL_IDX:
	ipush 1
	get [0]
	addi
	set [0]
	jump __COMPARE_FRAMES
	
__RETURN_FALSE:
	ipush 0
	return
	
__RETURN_TRUE:
	ipush 1
	return
