module fvm-pseudo

imports fvm-common

context-free start-symbols PsdBlock

sorts PsdBlock context-free syntax
  
  PsdBlock.Block = <{
    <instr:PsdBody>
}> { layout (indent "{" instr) }

  PsdBody.Seq = <<instr:PsdInstr*>> { layout (align-list instr) }
  
  
sorts PsdInstr context-free syntax

  PsdInstr.PsdExp = PsdExp
  PsdInstr.PsdIf = <if <PsdExp>: 
    <body:PsdBody>
> { layout (indent "if" body) }

  PsdInstr.PsdIfElse = <if <PsdExp>:
    <then:PsdBody>
else:
    <else:PsdBody>
> { layout (indent "if" then && align "if" "else:" && indent "else:" else) }

  PsdInstr.PsdFor = <for <ID> = <PsdExp> -\> <PsdExp>:
    <body:PsdBody>
> { layout (indent "for" body) }

  PsdInstr.PsdForIter = <for <ID> in <PsdExp>:
    <body:PsdBody>
> { layout (indent "for" body) }

  PsdInstr.PsdWhile = <while <PsdExp>:
    <body:PsdBody>
> { layout (indent "while" body) }

  PsdInstr.PsdDefine = <var <PsdExp> := <PsdExp>>
  PsdInstr.PsdAssign = <<PsdExp> := <PsdExp>>
  PsdInstr.PsdReturn = <return <PsdExp>>
  PsdInstr.PsdYield  = <yield <PsdExp>>
  PsdInstr.PsdThrow  = <throw <PsdExp>>
  PsdInstr.PsdPrint  = <print(<PsdExp>)>     {prefer}
  PsdInstr.PsdAssert = <assert(<PsdExp>)>    {prefer}
  
  PsdInstr = FuncDef 
  
  FuncDef.PsdFuncDef = <<name:ID>(<PsdArgList>):<Type> = {
    <fields:PsdInstr*>
}> { layout (indent name fields && align name "}" && align-list fields) }
  
  FuncDef.PsdGenDef = <gen <ID>(<PsdArgList>):<Type> = {
    <fields:PsdInstr*>
}> { layout (indent "gen" fields && align "gen" "}" && align-list fields) }

  PsdInstr.PsdRecDef = <rec <ID> = {
    <fields:PsdRecField*>
}> { layout (indent "rec" fields && align "rec" "}" && align-list fields) }

PsdInstr.PsdTryCatch = <try:
    <try:PsdInstr*>
catch <Type> as <ID>:
    <catch:PsdInstr*>
> { layout (indent "try:" try && align "try:" "catch" && align-list try && indent "catch" catch && align-list catch) }

  PsdInstr.PsdRecExtDef = <rec <ID>:<ID> = {
    <fields:PsdRecField*>
}> { layout (indent "rec" fields && align "rec" "}" && align-list fields) }

  PsdInstr.PsdWithFrom = <with <ID> from <PsdExp>:
    <body:PsdInstr*>
> { layout (indent "with" body && align-list body) }
  
  PsdRecField.PsdField = PsdField
  PsdRecField.PsdMethod = FuncDef
  
  PsdArgList.PsdArgList = {PsdField ","}*
    
  PsdField.Field = <<Type>:<ID>>
  Type.Int = <int>            {prefer}
  Type.Bool = <bool>          {prefer}
  Type.Array = <<Type>[]>
  Type.Class = <<ID>>
  
context-free priorities
    {PsdExp.PsdRef}                              >
    {left: PsdExp.PsdSubScript PsdExp.PsdFunApp} >
    {left: PsdExp.PsdMul PsdExp.PsdDiv}          >
    {left: PsdExp.PsdAdd PsdExp.PsdSub}          >
    {left: PsdExp.PsdLt PsdExp.PsdGt}            >
    {left: PsdExp.PsdEq PsdExp.PsdNeq}
    
sorts PsdExp context-free syntax

  PsdExp = <(<PsdExp>)>                             {bracket}
  PsdExp.PsdSubScript = <<PsdExp>[<PsdExp>]>        {right}
  PsdExp.PsdMul    = <<PsdExp> * <PsdExp>>          {left}
  PsdExp.PsdDiv    = <<PsdExp> / <PsdExp>>          {left}
  PsdExp.PsdAdd    = <<PsdExp> + <PsdExp>>          {left}
  PsdExp.PsdSub    = <<PsdExp> - <PsdExp>>          {left}
  PsdExp.PsdLt     = <<PsdExp> \< <PsdExp>>         {non-assoc}
  PsdExp.PsdGt     = <<PsdExp> \> <PsdExp>>         {non-assoc}
  PsdExp.PsdEq     = <<PsdExp> == <PsdExp>>         {left}
  PsdExp.PsdNeq    = <<PsdExp> != <PsdExp>>         {left}
  PsdExp.PsdInt    = <<INT>>
  PsdExp.PsdID     = <<ID>>
  PsdExp.PsdBool   = BOOL
  PsdExp.PsdFunApp = <<PsdExp>(<{PsdExp ","}*>)>    {left}
  PsdExp.PsdNew    = <new <ID>(<{PsdExp ","}*>)>
  PsdExp.PsdList   = <[<{PsdExp ","}*>]>
  PsdExp.PsdRef    = <<PsdExp>.<PsdExp>>            {left}
  
  