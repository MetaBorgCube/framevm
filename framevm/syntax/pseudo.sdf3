module pseudo

imports Common

context-free start-symbols PsdBody

sorts Psdbody context-free syntax
  
  PsdBody.Empty = 
  PsdBody.Seq = instr:PsdInstr+ 				{ layout (align-list instr) }
  
  
sorts PsdInstr context-free syntax

  PsdInstr.Exp = PsdExp
  PsdInstr.If = <if <PsdExp>: 
    <body:PsdBody>
>								{ layout (indent "if" body) }

  PsdInstr.IfElse = <if <PsdExp>:
    <then:PsdBody>
else:
    <else:PsdBody>
>								{ layout (indent "if" then && align "if" "else:" && indent "else:" else) }

  PsdInstr.For = <for <ID> = <PsdExp> -\> <PsdExp>:
    <body:PsdBody>
>								{ layout (indent "for" body && indent "for" body) }

  PsdInstr.ForIter = <for <ID> in <PsdExp>:
    <body:PsdBody>
>								{ layout (indent "for" body && indent "for" body) }

  PsdInstr.While = <while <PsdExp>:
    <body:PsdBody>
>								{ layout (indent "while" body && indent "while" body) }

  PsdInstr.Assign = <<PsdExp> := <PsdExp>>
  PsdInstr.Assign = <var <PsdExp> := <PsdExp>>
  PsdInstr.Return = <return <PsdExp>>
  PsdInstr.FieldDef = <var <ID> : <PsdType>> 
  PsdInstr.Yield = <yield <PsdExp>>
  PsdInstr.Throw = <throw <PsdExp>>
  
  PsdInstr = FuncDef 
  
  FuncDef.FuncDef = <<name:ID>(<PsdArgList>) = {
    <fields:PsdInstr*>
}>				 				{ layout (indent name fields && align name "}" && align-list fields) }
  
  FuncDef.GenDef = <gen <ID>(<PsdArgList>) = {
    <fields:PsdInstr*>
}>				 				{ layout (indent "gen" fields && align "gen" "}" && align-list fields) }

  PsdInstr.RecDef = <rec <ID> = {
    <fields:PsdRecField*>
}>				 				{ layout (indent "rec" fields && align "rec" "}" && align-list fields) }

PsdInstr.TryCatch = <try:
    <try:PsdInstr*>
catch <ID>:
	<catch:PsdInstr*>
>				 				{ layout (indent "try:" try && align "try:" "catch" && align-list try && indent "catch" catch && align-list catch) }

  PsdInstr.RecExtDef = <rec <ID>:<ID> = {
    <fields:PsdRecField*>
}>				 				{ layout (indent "rec" fields && align "rec" "}" && align-list fields) }

  PsdInstr.WithFrom = <with <ID> from <PsdExp>:
    <body:PsdInstr*>
>				 				{ layout (indent "with" body && align-list body) }
  
  PsdRecField.Field = <<ID> : <PsdType>>
  PsdRecField.Field = <<ID> : <PsdType>,>
  PsdRecField.Method = FuncDef
  PsdType = ID
  
  PsdArgList.List = {ID ","}+
  PsdArgList.Empty = <>
    
  
sorts PsdExp context-free syntax

  PsdExp = <(<PsdExp>)> 						{bracket}
  PsdExp.SubScript = <<PsdExp>[<PsdExp>]>
  PsdExp.Add  = <<PsdExp> + <PsdExp>>
  PsdExp.Sub  = <<PsdExp> - <PsdExp>>
  PsdExp.Eq   = <<PsdExp> == <PsdExp>>
  PsdExp.Neq  = <<PsdExp> != <PsdExp>>
  PsdExp.Int  = <<INT>>
  PsdExp.ID   = <<ID>>
  PsdExp.Bool = BOOL
  PsdExp.FunApp = <<PsdExp>(<{PsdExp ","}*>)>
  PsdExp.New = <new <ID>(<{PsdExp ","}*>)>
  PsdExp.List = <[<{PsdExp ","}*>]>
  PsdExp.Ref = <<PsdExp>.<PsdExp>>				{left}
  
  