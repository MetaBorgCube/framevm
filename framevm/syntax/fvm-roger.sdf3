module fvm-roger

imports
	fvm-common
  
sorts RBlock context-free syntax

	RBlock.RGR_Block = <
<lbl:Label>: 
    <instr:Instr*> 
    <jump:ControlStmt>

>			{ layout (indent lbl instr && align-list instr && align instr jump ) }
	
//	Instr.RGR_PureAssign = <<RGRVar> \<- <Exp> @inline>
	Instr.RGR_Stmt = Stmt
	Instr.RGR_Assign = <<RGRVar> \<- <Exp>>
	
	RGRVar = LOCAL
//	RGRVar = REGISTER
	
sorts Exp context-free syntax
    Exp.RGR_Ref    = <<RGRVar>>
    Exp = Label
    Exp.RGR_REq    = <eqr(<Exp>, <Exp>)>
	
	Exp = IntOpExp
	IntOpExp.RGR_ILoad  = <iload(<INT>)>
	IntOpExp.RGR_NLoad  = <nload()>
	IntOpExp.RGR_INeg   = <negi(<Exp>)>
	IntOpExp.RGR_IAdd   = <addi(<Exp>, <Exp>)>
	IntOpExp.RGR_IMul   = <muli(<Exp>, <Exp>)>
	IntOpExp.RGR_ISub   = <subi(<Exp>, <Exp>)>
	IntOpExp.RGR_IDiv   = <divi(<Exp>, <Exp>)>
	IntOpExp.RGR_IMod   = <modi(<Exp>, <Exp>)>
	
	IntOpExp.RGR_IEq    = <eqi(<Exp>, <Exp>)>
	IntOpExp.RGR_ILt    = <lti(<Exp>, <Exp>)>
	IntOpExp.RGR_IGt    = <gti(<Exp>, <Exp>)>
	IntOpExp.RGR_IOr    = <ori(<Exp>, <Exp>)>
	IntOpExp.RGR_IXor   = <xori(<Exp>, <Exp>)>
	IntOpExp.RGR_IAnd   = <andi(<Exp>, <Exp>)>	
	
	Exp = TypeExp
	TypeExp.RGR_IsInt   = <int?(<Exp>)>
	TypeExp.RGR_IsCont  = <cont?(<Exp>)>
	TypeExp.RGR_IsFrame = <frame?(<Exp>)>
	TypeExp.RGR_IsCF    = <CF?(<Exp>)>
	TypeExp.RGR_IsNull  = <NULL?(<Exp>)>
	TypeExp.RGR_IsCode  = <code?(<Exp>)>
	
	Exp = FrameExp
	FrameExp.RGR_New    = <new(<IntOrExp>)>
	FrameExp.RGR_New    = <new()>
	FrameExp.RGR_NewRec = <new{<{Exp ","}+>}>
	FrameExp.RGR_FSize  = <size(<Exp>)>
	
	Stmt.RGR_Link       = <link(<Exp>, <PathOrExp>, <LinkRef>)>
 
	Stmt.RGR_Set          = <set(<PathOrExp>, <Exp>)>
	Stmt.RGR_Set          = <set(<Exp>, <NEPathOrExp>, <Exp>)>
	FrameExp.RGR_Get      = <get(<PathOrExp>)>
	FrameExp.RGR_Get      = <get(<Exp>, <PathOrExp>)>
	
	Exp = OnReturnExp
	OnReturnExp.RGR_CFRGet = <rget()>
	
	Exp = ContExp
	ContExp.RGR_CFThis       = <curCF()>
	ContExp.RGR_ContNew      = <newC(<Exp>, <Exp>)>
	ContExp.RGR_CFNew        = <newCF(<Exp>)>
	ContExp.RGR_ContCur      = <curC(<Label>)>
	
	Stmt.RGR_ContSet         = <setC(<ContOrExp>, <Exp>)>
	Stmt.RGR_ContSet         = <setC(<Exp>, <ContOrExp>, <Exp>)>
	ContExp.RGR_ContGet      = <getC(<ContOrExp>)>
	ContExp.RGR_ContGet      = <getC(<Exp>, <ContOrExp>)>
    ContExp.RGR_CFUnpack     = <unpackCF(<Exp>)>
    ContExp.RGR_ContUnpack   = <unpackC(<Exp>)>
	
	
	ControlStmt.RGR_Return     = <return(<{Exp ","}*>)>
	ControlStmt.RGR_Yield      = <yield(<{Exp ","}+>, <Exp>)>
	ControlStmt.RGR_JumpZ      = <jumpz(<Exp>, <Exp>, <Exp>)>
	ControlStmt.RGR_Jump       = <jump(<Exp>)>
	ControlStmt.RGR_Call       = <call(<Exp>, <Exp>, <Exp>)>
	ControlStmt.RGR_Call       = <call(<Exp>, <Exp>)>
	ControlStmt.RGR_TailCall   = <tailcall(<Exp>, <Exp>)>
	ControlStmt.RGR_TailCall   = <tailcall(<Exp>)>
	
	ControlStmt.RGR_ContCallZWith = <callCz(<Exp>, <Exp>, <Exp>, <{Exp ", "}+>)>
	ControlStmt.RGR_ContCallZ     = <callCz(<Exp>, <Exp>, <Exp>)>
	
	ControlStmt.RGR_ContCallWith = <callC(<Exp>, <{Exp ", "}+>)>
	ControlStmt.RGR_ContCall     = <callC(<Exp>)>
	ControlStmt.RGR_CFCall       = <callCF(<Exp>, <Exp>)>
	ControlStmt.RGR_CFReturn     = <returnCF(<Exp>)>
	
	ControlStmt.RGR_Try        = <try(<Exp>, <Exp>, <Exp>, <Exp>, <Exp>)>
	ControlStmt.RGR_Try        = <try(<Exp>, <Exp>, <Exp>)>
	ControlStmt.RGR_Throw      = <throw(<Exp>)>
	
	Stmt.RGR_ScopeExit        = <exitscope(<PathOrEmpty>)>
	Stmt.RGR_ScopeNew         = <newscope(<Exp>, <LinkRef>)>
	ControlStmt.RGR_ScopeExit = <exitscope(<PathOrEmpty>, <Exp>)>
	ControlStmt.RGR_ScopeNew  = <newscope(<Exp>, <LinkRef>, <Exp>)>
	Stmt.RGR_ScopeSetCurrent  = <mkcurrent(<Exp>)>
	Exp.RGR_ScopeGetCurrent   = <getcurrent()>
	
	Stmt.RGR_Print           = <print(<Exp>)>
	Stmt.RGR_PrintChar       = <printc(<Exp>)>
	Stmt.RGR_Debug           = <debug()>		
	Stmt.RGR_DebugKill       = <debug!()>	
	Stmt.RGR_Tick            = <tick()>	
	Stmt.RGR_Tock            = <tock()>
	Stmt.RGR_ForceGC         = <forceGC()>
	
	Exp.RGR_StringLoad       = <sload(<STRING>)>
	Exp.RGR_CharLoad         = <cload(<CHAR>)>
  
  
	
	IntOrExp = Exp
	IntOrExp.RGR_IntVal = INTLEZ
	
	PathOrExp = Exp
	PathOrExp = PathOrEmpty
	
	NEPathOrExp = Exp
	NEPathOrExp = Path
	
	ContOrExp = Exp
	ContOrExp = ContRef
	
	