module fvm-roger

imports
	fvm-common
  
sorts RBlock context-free syntax

	RBlock.RGR_Block = <
<lbl:Label>: 
    <size:CFSize?>
    <ret:OnReturnInstr?>
	<instr:Instr*> 
	<jump:ControlTerminal>
>			{ layout (indent lbl size && align-list instr && align size ret && align instr jump && align ret instr) }
	
	OnReturnInstr.OnReturn = <<{RGRVar ","}+> \<- <OnReturnExp>>

	Instr.RGR_PureAssign = <<RGRVar> \<- <Exp> @inline>
	Instr.RGR_Terminal = ExpTerminal
	Instr.RGR_Assign = <<RGRVar> \<- <Exp>>
	Instr.RGR_PathAlias = <path <ID> := <Path>>
	
	RGRVar = LOCAL
	RGRVar = REGISTER
	
sorts Exp context-free syntax
    Exp.RGR_Ref    = <<ID>>
	
	Exp = IntOpExp
	IntOpExp.RGR_ILoad  = <iload(<INT>)>
	IntOpExp.RGR_INeg   = <negi(<Exp>)>
	IntOpExp.RGR_IAdd   = <addi(<Exp>, <Exp>)>
	IntOpExp.RGR_IMul   = <muli(<Exp>, <Exp>)>
	IntOpExp.RGR_ISub   = <subi(<Exp>, <Exp>)>
	IntOpExp.RGR_IDiv   = <divi(<Exp>, <Exp>)>
	IntOpExp.RGR_IMod   = <modi(<Exp>, <Exp>)>
	
	IntOpExp.RGR_IEq    = <eqi(<Exp>, <Exp>)>
	IntOpExp.RGR_ILt    = <lti(<Exp>, <Exp>)>
	IntOpExp.RGR_IGt    = <gti(<Exp>, <Exp>)>
	IntOpExp.RGR_IOr    = <ori(<Exp>, <Exp>)>
	IntOpExp.RGR_IXor   = <xori(<Exp>, <Exp>)>
	IntOpExp.RGR_IAnd   = <andi(<Exp>, <Exp>)>	
	
	Exp = TypeExp
	TypeExp.RGR_IsInt   = <int?(<Exp>)>
	TypeExp.RGR_IsCont  = <cont?(<Exp>)>
	TypeExp.RGR_IsFrame = <frame?(<Exp>)>
	
	Exp = FrameExp
	FrameExp.RGR_New    = <new(<IntOrExp>)>
	FrameExp.RGR_New    = <new()>
	
	ExpTerminal.RGR_Link  = <link(<Exp>, <PathOrExp>, <LinkRef>)>
 
	ExpTerminal.RGR_Set   = <set(<PathOrExp>, <Exp>)>
	ExpTerminal.RGR_SetR  = <set(<Exp>, <PathOrExp>, <Exp>)>
	FrameExp.RGR_Get      = <get(<PathOrExp>)>
	FrameExp.RGR_GetR     = <get(<Exp>, <PathOrExp>)>		
	
	Exp = ContExp
	OnReturnExp.RGR_ContRGet = <rget(<IntOrExp>)>
	ContExp.RGR_ContThis     = <cgetcurrent()>
	ContExp.RGR_ContNew      = <cnew(<Label>, <IntOrExp>)>
	ContExp.RGR_ContTransfer = <transfer(<{Exp ","}+>, <ContOrExp>)>
	
	ExpTerminal.RGR_ContSet  = <cset(<ContOrExp>, <Exp>)>
	ExpTerminal.RGR_ContSetR = <cset(<Exp>, <ContOrExp>, <Exp>)>
	ContExp.RGR_ContGet      = <cget(<ContOrExp>)>
	ContExp.RGR_ContGetR     = <cget(<Exp>, <ContOrExp>)>
	
	
	ControlTerminal.RGR_Return     = <return(<{Exp ","}+>)>
	ControlTerminal.RGR_Yield      = <yield(<{Exp ","}+>, <Label>)>
	ControlTerminal.RGR_JumpZ      = <jumpz(<Exp>, <Label>, <Label>)>
	ControlTerminal.RGR_Jump       = <jump(<Label>)>
	ControlTerminal.RGR_Call       = <call(<Exp>, <Label>, <Label>)>
	ControlTerminal.RGR_Call       = <call(<Exp>, <Label>)>
	ControlTerminal.RGR_TailCall   = <tailcall(<Exp>, <Label>)>
	ControlTerminal.RGR_TailCall   = <tailcall(<Exp>)>
	ControlTerminal.RGR_ContCall   = <ccall(<Exp>, <Label>)>
	ControlTerminal.RGR_ContReturn = <cret(<Exp>)>
	
	ControlTerminal.RGR_Try        = <try(<Exp>, <Label>, <Exp>, <Label>, <Label>)>
	ControlTerminal.RGR_Try        = <try(<Exp>, <Exp>, <Label>)>
	ControlTerminal.RGR_Throw      = <throw(<Exp>)>
	
	ExpTerminal.RGR_ScopeExit       = <exitscope(<Path>)>
	ExpTerminal.RGR_ScopeNew        = <newscope(<Exp>, <LinkRef>)>
	ControlTerminal.RGR_ScopeExit   = <exitscope(<Path>, <Label>)>
	ControlTerminal.RGR_ScopeNew    = <newscope(<Exp>, <LinkRef>, <Label>)>
	ExpTerminal.RGR_ScopeSetCurrent = <mkcurrent(<Exp>)>
	Exp.RGR_ScopegetCurrent         = <mkcurrent()>
	ExpTerminal.RGR_Print           = <print(<Exp>)>	
	ExpTerminal.RGR_Debug           = <debug()>		
	ExpTerminal.RGR_DebugKill       = <debug!()>	
	
	
	
	IntOrExp = Exp
	IntOrExp = INTLEZ
	
	PathOrExp = Exp
	PathOrExp = Path
	
	ContOrExp = Exp
	ContOrExp = ContRef
	
	