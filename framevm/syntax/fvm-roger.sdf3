module fvm-roger

imports
	fvm-common
  
sorts RBlock context-free syntax

	RBlock.RGR_Block = <
<lbl:Label>: 
    <size:CFRSize?>
    <ret:OnReturnInstr?>
    <instr:Instr*> 
    <jump:ControlStmt>

>			{ layout (indent lbl size && align-list instr && align size ret && align instr jump && align ret instr) }
	
	OnReturnInstr.RGR_OnReturn = <<{RGRVar ","}+> \<- <OnReturnExp>>

//	Instr.RGR_PureAssign = <<RGRVar> \<- <Exp> @inline>
	Instr.RGR_Stmt = Stmt
	Instr.RGR_Assign = <<RGRVar> \<- <Exp>>
	
	RGRVar = LOCAL
//	RGRVar = REGISTER
	
sorts Exp context-free syntax
    Exp.RGR_Ref    = <<RGRVar>>
    Exp.RGR_REq    = <eqr(<Exp>, <Exp>)>
	
	Exp = IntOpExp
	IntOpExp.RGR_ILoad  = <iload(<INT>)>
	IntOpExp.RGR_INeg   = <negi(<Exp>)>
	IntOpExp.RGR_IAdd   = <addi(<Exp>, <Exp>)>
	IntOpExp.RGR_IMul   = <muli(<Exp>, <Exp>)>
	IntOpExp.RGR_ISub   = <subi(<Exp>, <Exp>)>
	IntOpExp.RGR_IDiv   = <divi(<Exp>, <Exp>)>
	IntOpExp.RGR_IMod   = <modi(<Exp>, <Exp>)>
	
	IntOpExp.RGR_IEq    = <eqi(<Exp>, <Exp>)>
	IntOpExp.RGR_ILt    = <lti(<Exp>, <Exp>)>
	IntOpExp.RGR_IGt    = <gti(<Exp>, <Exp>)>
	IntOpExp.RGR_IOr    = <ori(<Exp>, <Exp>)>
	IntOpExp.RGR_IXor   = <xori(<Exp>, <Exp>)>
	IntOpExp.RGR_IAnd   = <andi(<Exp>, <Exp>)>	
	
	Exp = TypeExp
	TypeExp.RGR_IsInt   = <int?(<Exp>)>
	TypeExp.RGR_IsCont  = <cont?(<Exp>)>
	TypeExp.RGR_IsFrame = <frame?(<Exp>)>
	TypeExp.RGR_IsClos  = <closure?(<Exp>)>
	
	Exp = FrameExp
	FrameExp.RGR_New    = <new(<IntOrExp>)>
	FrameExp.RGR_New    = <new()>
	FrameExp.RGR_NewRec = <new{<{Exp ","}+>}>
	FrameExp.RGR_FSize  = <size(<Exp>)>
	
	Stmt.RGR_Link       = <link(<Exp>, <PathOrExp>, <LinkRef>)>
 
	Stmt.RGR_Set          = <set(<PathOrExp>, <Exp>)>
	Stmt.RGR_Set          = <set(<Exp>, <NEPathOrExp>, <Exp>)>
	FrameExp.RGR_Get      = <get(<PathOrExp>)>
	FrameExp.RGR_Get      = <get(<Exp>, <PathOrExp>)>		
	
	Stmt.RGR_Empty        = <empty(<NEPathOrExp>)>
	Stmt.RGR_Empty        = <empty(<Exp>, <NEPathOrExp>)>
	FrameExp.RGR_IsEmpty  = <empty?(<NEPathOrExp>)>
	FrameExp.RGR_IsEmpty  = <empty?(<Exp>, <NEPathOrExp>)>
	
	Exp = ContExp
	OnReturnExp.RGR_ContRGet = <rget(<INTLZ>)>
	OnReturnExp.RGR_ContRGet = <rget()>
	ContExp.RGR_ContThis     = <cgetcurrent()>
	ContExp.RGR_ContNew      = <cnew(<Exp>, <Label>, <IntOrExp>)>
	Stmt.RGR_ContTransfer    = <transfer(<{Exp ","}+>, <ContOrExp>)>
	
	Stmt.RGR_ContSet         = <cset(<ContOrExp>, <Exp>)>
	Stmt.RGR_ContSet         = <cset(<Exp>, <ContOrExp>, <Exp>)>
	ContExp.RGR_ContGet      = <cget(<ContOrExp>)>
	ContExp.RGR_ContGet      = <cget(<Exp>, <ContOrExp>)>
    ContExp.RGR_ContUnpack   = <cunpack(<Exp>)>
	
	
	ControlStmt.RGR_Return     = <return(<{Exp ","}*>)>
	ControlStmt.RGR_Yield      = <yield(<{Exp ","}+>, <Label>)>
	ControlStmt.RGR_JumpZ      = <jumpz(<Exp>, <Label>, <Label>)>
	ControlStmt.RGR_Jump       = <jump(<Label>)>
	ControlStmt.RGR_Call       = <call(<Exp>, <Label>, <Label>)>
	ControlStmt.RGR_Call       = <call(<Exp>, <Label>)>
	ControlStmt.RGR_TailCall   = <tailcall(<Exp>, <Label>)>
	ControlStmt.RGR_TailCall   = <tailcall(<Exp>)>
	ControlStmt.RGR_ContCall   = <ccall(<Exp>, <Label>)>
	ControlStmt.RGR_ContReturn = <cret(<Exp>)>
	
	ControlStmt.RGR_Try        = <try(<Exp>, <Label>, <Exp>, <Label>, <Label>)>
	ControlStmt.RGR_Try        = <try(<Exp>, <Exp>, <Label>)>
	ControlStmt.RGR_Throw      = <throw(<Exp>)>
	
	Stmt.RGR_ScopeExit        = <exitscope(<PathOrEmpty>)>
	Stmt.RGR_ScopeNew         = <newscope(<Exp>, <LinkRef>)>
	ControlStmt.RGR_ScopeExit = <exitscope(<PathOrEmpty>, <Label>)>
	ControlStmt.RGR_ScopeNew  = <newscope(<Exp>, <LinkRef>, <Label>)>
	Stmt.RGR_ScopeSetCurrent  = <mkcurrent(<Exp>)>
	Exp.RGR_ScopeGetCurrent   = <getcurrent()>
	
	Stmt.RGR_Print           = <print(<Exp>)>
	Stmt.RGR_PrintChar       = <printc(<Exp>)>
	Stmt.RGR_Debug           = <debug()>		
	Stmt.RGR_DebugKill       = <debug!()>
	
	Exp.RGR_StringLoad       = <sload(<STRING>)>
	Exp.RGR_CharLoad         = <cload(<CHAR>)>	
	
    Exp = ClosExp
//    ClosExp.RGR_ClosNew      = <newc(<Exp>, <CopyPolicy>, <Label>, <IntOrExp>)>
    ClosExp.RGR_ClosNew      = <newc(<Exp>, <Label>, <IntOrExp>)>
    ClosExp.RGR_ClosToCont   = <cnew(<Exp>)>
  
  
	
	IntOrExp = Exp
	IntOrExp.RGR_IntVal = INTLEZ
	
	PathOrExp = Exp
	PathOrExp = PathOrEmpty
	
	NEPathOrExp = Exp
	NEPathOrExp = Path
	
	ContOrExp = Exp
	ContOrExp = ContRef
	
	