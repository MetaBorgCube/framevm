module framevm

imports Common pseudo

context-free start-symbols Program

sorts Program context-free syntax
  Program.Empty = <>
  Program.Program = body:Block*	{ layout (align-list body) }
  
  Label.Label = LABEL
  Label.Label = MAIN
  
sorts Block context-free syntax

  Block.Routine = lbl:Label ":" body:Body 			{ layout (indent lbl body) }
  Block.PseudoCode = "{" body:PsdBody "}" 			{ layout (indent "{" body && align "{" "}") }
  
  Body.Empty = 
  Body.Seq = instr:Instr+ 							{ layout (align-list instr) }
  
sorts Instr context-free syntax
  
  Instr.IAdd 	 = <addi>					// Consumes two ints from stack and adds them, result is stored on stack
  Instr.IEq 	 = <eqi>					// Consumes two ints from stack and equals them, result is stored on stack
  Instr.IConst 	 = <iconst <INT>>			// Push int value to stack
  
  Instr.New      = <new>					// Create new frame and push pointer on stack
  Instr.Link	 = <link <Path> <ID>>		// Link frame on stack to given location (Empty path is current frame)
  Instr.LinkR	 = <linkr <ID>>				// Link frame on stack to the frame in second place
  Instr.Set      = <set <Path>>				// Set value on the stack at path location
  Instr.SetR     = <setr <Path>>			// Set value on the stack at path location starting in frame on stack
  Instr.Get      = <get <Path>>				// Store value at path in the stack
  Instr.GetR     = <getr <Path>>			// Store value at path from frame on stack on stack
  
  Instr.JumpZ    = <jumpz <Label> <Label>>	// Jump to first label if stack zero, else jump to other label
  Instr.Jump     = <jump <Label>>			// Unconditional jump to LABEL
  Instr.Call     = <call <Label> <Label>>	// Call routine LABEL, using frame on the stack
  
  Instr.Dup      = <dup>					// duplicates the value on the stack
  Instr.Print    = <print>					// Prints value on the stack
  Instr.Debug    = <debug>					// Prints the state of the vm
  Instr.Return   = <return>					// Takes return address from opstack and copies top of stack to caller stack 
  
  Path.Self  = <[]>
  Path.Path  = <[<{PathRef ","}+>]>
  PathRef.Slot = INT
  PathRef.Link = ID

  
/* 

Values 

CodeV
- jump
- return 
- ...

IntV
- add
- pushi
- jumpz

BoolV
- true, false
- and 
- or

FrameRefV
- new
- set
- get 

closure =

Frame with code pointer + reference pointer

*/
  
/*

initialization of frame slots / soundness 

distinction between frame links and reference edges to frames 

well-formedness properties of instructions?

e.g. clean operand stack

*/