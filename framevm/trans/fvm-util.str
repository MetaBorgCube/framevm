module fvm-util

imports
    nabl2/api
    
    signatures/fvm-roger-sig
    signatures/framevm-sig
    signatures/fvm-common-sig
    fvm-common
    fvm-desugar

rules
    
    // Convert a flat list of instructions to a VM program
    // Blocks are separated by labels instead of actual blocks
    // Sugar is re-added to make it printable        
    rgr-from-flat: (h@FVM_Header(items), [f|body]) -> <rgr-from-flat> (h, [(FVM_Label("MAIN"), 99), f | body])
      where
        <not(?(FVM_Label(_)) + ?( (_, _) ))> f
    
    rgr-from-flat: (h@FVM_Header(items), [f|body]) -> <rgr-from-flat> (h, [(FVM_Label("MAIN"), f) | body])
      where
        <is-int> f
        
    rgr-from-flat: (h@FVM_Header(items), body) -> <split-header; resugar> RGR_Program(h, None(), blocks)
      where
        <is-list> body
      with
        labels := <collect-all(?(FVM_AutoLabel(_))); map( (\ FVM_AutoLabel(name) -> (name, FVM_Label(<upper-case; newname> name)) \) )> body;
        body' := <topdown(try( (\ FVM_AutoLabel(lbl_name) -> <lookup'> (lbl_name, labels) \)))> body;
        (blocks, []) := <foldr(!([], []), from-flat-fold)> body'
        
    rgr-from-flat: body -> <rgr-from-flat> (FVM_Header([]), body) where <is-list> body
 
    
    // If the current instruction is a label, close the block (we are going bottom to top)
    // Else just store the instruction and continue
    from-flat-fold: (FVM_Label(lbl), (blocks, instrs)) -> 
    				([FVM_Block(FVM_Label(lbl), FVM_Seq(instrs)) | blocks], [])
    from-flat-fold: (instr, (blocks, instrs)) -> (blocks, [instr | instrs])
    
    
rules
    // Convert the path from an nabl2 lookup to one that can be interpreted by the VM  
    framevm-path-from-nabl2: (name, namespace, property) -> FVM_Path(fvm_path)
      where
      	<is-string> property;
        a            := <nabl2-get-ast-analysis> name;
        ref-occ      := <nabl2-mk-occurrence(|namespace)> name;
        (dec-occ, path) := <nabl2-get-resolved-name(|a)> ref-occ;
        idx          := <nabl2-get-property(|a, property)> dec-occ;
        (path_body, path_end) := <split-init-last> path;
        
//        TODO: Do something with the path
        fvm_path     := <concat>[<map(from-nabl2-path)> path_body, [FVM_Slot(<int-to-string> idx)]]
    
    framevm-path-from-nabl2: (name, namespace, index) -> FVM_Path(fvm_path)
      where
        <is-int> index;
        a            := <nabl2-get-ast-analysis> name;
        ref-occ      := <nabl2-mk-occurrence(|namespace)> name;
        (dec-occ, path) := <nabl2-get-resolved-name(|a)> ref-occ;
        (path_body, path_end) := <split-init-last> path;
        
//        TODO: Do something with the path
        fvm_path     := <concat>[<map(from-nabl2-path)> path_body, [FVM_Slot(<int-to-string> index)]]
    
    
    from-nabl2-path: E(scope, lbl) -> FVM_Link(<get-constructor> lbl)
    

rules
    rgr-assign-registers: RGR_Program(FVM_Header(header), p, blocks) -> RGR_Program(FVM_Header([FVM_RegisterSize(<length; int-to-string> binds) | header]), p, blocks')
      with
        init_block_name := <getfirst( (\FVM_InitBlock(name) -> name \) )> header;
        (binds, assign_bound_blocks) := <foldl(assign-block-registers)> (blocks, ([], []));
        blocks' := <rgr-assign-registers-exp(|binds)> assign_bound_blocks
        
    assign-block-registers: (RGR_Block(lbl, body, jump), (binds, blocks)) -> (binds2, [RGR_Block(lbl, body', jump') | blocks])
      with
        (body', binds1) := <rgr-assign-registers-instr> (body, binds);
        ([jump'], binds2) := <rgr-assign-registers-instr> ([jump], binds1)
    
    rgr-assign-registers-instr: ([], binds) -> ([], binds)
    rgr-assign-registers-instr: ([RGR_Assign(var@RGR_AutoVar(name), val) | t], binds) -> ([instr' | t'], binds2)
      where
        rgr_var := <lookup'> (var, binds) // If already bound
      with
        instr' := RGR_Assign(rgr_var, val);
        (t', binds2) := <rgr-assign-registers-instr> (t, binds)
        
    rgr-assign-registers-instr: ([RGR_Assign(var@RGR_AutoVar(name), val) | t], binds) -> ([instr' | t'], binds3)
      with
        var_name := $[r[<length; int-to-string> binds]];
        instr' := RGR_Assign(var_name, val);
        binds2 := [(var, var_name) | binds];
        (t', binds3) := <rgr-assign-registers-instr> (t, binds2)
        
    rgr-assign-registers-instr: ([instr | t], binds) -> ([instr | t'], binds2)
      with
        (t', binds2) := <rgr-assign-registers-instr> (t, binds)
    
    
    rgr-assign-registers-exp(|binds): exp -> <topdown(try(rgr-assign-registers-exp-resolve(|binds)))> 
    rgr-assign-registers-exp-resolve(|binds): var@RGR_AutoVar(_) -> RGR_Ref(name) 
	  with 
	    name := <lookup'> (var, binds)
