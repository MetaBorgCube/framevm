module fvm-util

imports
	nabl2/api
  
	signatures/framevm-sig
	fvm-desugar

rules
	
	// Convert a flat list of instructions to a VM program
	// Blocks are separated by labels instead of actual blocks
	// Sugar is re-added to make it printable
	framevm-from-flat: [n | body] -> <resugar> FVM_Program(<is-string> n, blocks)
	  where
		(blocks, []) := <foldr(!([], []), from-flat-fold)> [FVM_Label("MAIN") | body]
		
	framevm-from-flat: [body] -> <resugar> FVM_Program("0", blocks)
	  where
		(blocks, []) := <foldr(!([], []), from-flat-fold)> [FVM_Label("MAIN") | body]
    
    
    // Convert the path from an nabl2 lookup to one that can be interpreted by the VM  
    framevm-path-from-nabl2: (name, namespace, property) -> fvm_path
      where
    	a            := <nabl2-get-ast-analysis> name;
		ref-occ      := <nabl2-mk-occurrence(|namespace)> name;
		(dec-occ, path) := <nabl2-get-resolved-name(|a)> ref-occ;
		idx          := <nabl2-get-property(|a, property)> dec-occ;
		(path_body, path_end) := <split-init-last> path;
		
//		TODO: Do something with the path
		fvm_path     := FVM_Path(<concat>[<map(from-nabl2-path)> path_body, [FVM_Slot(<int-to-string> idx)]])
    
    from-nabl2-path: E(scope, lbl) -> FVM_Link(<get-constructor> lbl)
    
    // If the current instruction is a label, close the block (we are going bottom to top)
    // Else just store the instruction and continue
	from-flat-fold: (FVM_Label(lbl), (blocks, instrs)) -> ([FVM_Block(FVM_Label(lbl), FVM_Seq(instrs)) | blocks], [])
	from-flat-fold: (instr, (blocks, instrs)) -> (blocks, [instr | instrs])
