module toRISC

imports
    signatures/fvm-stacy-sig
    signatures/fvm-common-sig
    fvm-common
    
    interpreter/util

rules
    to-RISC-block: FVM_Block(lbl, s, FVM_Seq(body), d) -> FVM_Block(lbl, <update-RISC-size> s, FVM_Seq(body_risc), d)
      where
        body_risc := <apply-until-no-change(to-RISC); flatten-list> body
        
    update-RISC-size: Some(n) -> Some(<addi> (n, 3))	// TODO: is this correct?
    update-RISC-size: None() -> None()
        
        
rules // to RISC rules

    to-RISC: FVM_Path([]) -> FVM_Self()
    to-RISC: STC_Dup()    -> STC_DupN("1")
    to-RISC: STC_Swap()   -> STC_SwapN("1")
    to-RISC: STC_New()    -> STC_New("0")
    to-RISC: STC_ContTransfer() -> STC_ContTransfer("1")
    
    to-RISC: STC_Return()        -> STC_ReturnN("1")
    to-RISC: STC_CharPush(c)     -> STC_IPush(<int-to-string> <index(|1)> <explode-string> c)
    to-RISC: STC_Get(FVM_Self()) -> STC_ScopeGetCurrent()
    to-RISC: STC_Set(FVM_Self()) -> STC_ScopeSetCurrent()
    to-RISC: STC_ContRGet()      -> STC_ContRGetN("1")
    

rules

    to-RISC: STC_New(n)          -> [STC_IPush(n), STC_NewR()]
    to-RISC: STC_Link(path, lbl) -> [STC_Get(path),  STC_LinkR(lbl)]
    
    to-RISC: STC_Get() -> [STC_ScopeGetCurrent(), STC_Swap(), STC_GetR()]
    to-RISC: STC_Get(FVM_Path(path)) -> [STC_ScopeGetCurrent(), STC_GetR(FVM_Path(path))]

    to-RISC: STC_GetR(FVM_Path(path)) -> <map(\e -> STC_GetR(FVM_Path([e]))\)> path where <geq> (<length> path, 2)
    to-RISC: STC_GetR(FVM_Path([FVM_Slot(slot_id)])) -> [STC_IPush(slot_id), STC_GetR()]
	 
	to-RISC: STC_Set() -> [STC_ScopeGetCurrent(), STC_SwapN("2"), STC_Swap(), STC_SetR()]
	
	to-RISC: STC_Set(path) -> [STC_ScopeGetCurrent() , STC_Swap(), STC_SetR(path)]
    
    to-RISC: STC_SetR(FVM_Path([FVM_Slot(slot_id)])) -> [STC_IPush(slot_id), STC_Swap() , STC_SetR()]
    
	to-RISC: STC_SetR(FVM_Path(path)) -> [STC_Swap(), STC_GetR(FVM_Path(init)) , STC_Swap(), STC_SetR(FVM_Path([last]))]
      where
        <geq> (<length> path, 2);
        (init, last) := <split-init-last> path


rules

    to-RISC: STC_ContNew(lbl, n) -> [STC_IPush(n), STC_ContNewR(lbl)]
    to-RISC: STC_ContGet(c)      -> [STC_ContThis(), STC_ContGetR(c)]
    to-RISC: STC_ContGet()       -> [STC_ContThis(), STC_Swap(), STC_ContGetR()]
    
    to-RISC: STC_ContGetR(FVM_Cont(Bind(_, idx))) -> [STC_IPush(<int-to-string> idx), STC_ContGetR()]
    
    to-RISC: STC_ContSet(c)      -> [STC_ContThis(), STC_Swap(), STC_ContSetR(c)]
    to-RISC: STC_ContSet()       -> [STC_ContThis(), STC_SwapN("2"), STC_Swap(), STC_ContSetR()]
    
    to-RISC: STC_ContSetR(FVM_Cont(Bind(_, idx))) -> [STC_IPush(<int-to-string> idx), STC_Swap(), STC_ContSetR()]
    
    to-RISC: STC_ContTransfer(n, c) -> [STC_ContGet(c), STC_ContTransfer(n)]
    
    
rules

    to-RISC: STC_ScopeExit(path, lbl) -> 
        [STC_ScopeExit(path),
         STC_Jump(lbl)
        ]
        
    to-RISC: STC_ScopeExit(path) -> 
        [STC_Get(path),
         STC_ScopeSetCurrent()
        ]
    
    to-RISC: STC_ScopeNew(link) ->
        [STC_Dup(),
         STC_Link(FVM_Self(), link),
         STC_ScopeSetCurrent()
        ]
        
    to-RISC: STC_ScopeNew(link, lbl) ->
        [STC_ScopeNew(link),
         STC_Jump(lbl)
        ]
    

rules
        
    to-RISC: STC_Call(FVM_Label(return)) -> 
        [STC_Dup(), 
         STC_ContGet(FVM_Cont(Bind("x", 1))), 
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContThis(), 
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_ContCall(FVM_Label(return))
        ]
        
    to-RISC: STC_TailCall() -> 
        [STC_Dup(), 
         STC_ContGet(FVM_Cont(Bind("x", 1))), 
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))), 
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_ContReturn()
        ]
      
    to-RISC: STC_Call(FVM_Label(block), FVM_Label(returnAddr)) -> 
        [STC_ContNew(FVM_Label(block), "2"), 
         STC_Call(FVM_Label(returnAddr))
        ]
        
    to-RISC: STC_TailCall(FVM_Label(block)) -> 
        [STC_ContNew(FVM_Label(block), "2"), 
         STC_TailCall()
        ]

    to-RISC: STC_ContCall(c, lbl) -> 
        [STC_ContGet(c),
         STC_ContCall(lbl)
        ]

    to-RISC: STC_ContReturn(c) -> 
        [STC_ContGet(c),
         STC_ContReturn()
        ]

    to-RISC: STC_ContTransfer(c, n) -> 
        [STC_ContGet(c),
         STC_ContTransfer(n)
        ]

    to-RISC: STC_ReturnN(n) -> 
        [STC_ContTransfer(n, FVM_Cont(Bind("c", 0))),
         STC_ContReturn(FVM_Cont(Bind("c", 0)))
        ]
    
    to-RISC: STC_Yield(lbl) -> 
        [STC_ContThis(),
         STC_Swap(),
         STC_ContTransfer("2", FVM_Cont(Bind("c", 0))),
         STC_ContCall(FVM_Cont(Bind("c", 0)), lbl)
        ]

    to-RISC: STC_Throw() -> 
        [STC_ContTransfer("1", FVM_Cont(Bind("x", 1))),
         STC_ContReturn(FVM_Cont(Bind("x", 1)))
        ]


rules
       
    to-RISC: STC_Try(lbl_try, lbl_catch, lbl_next) ->
        [STC_ContNew(lbl_catch, "3"),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         
         STC_Swap(),
         
         STC_ContNew(lbl_try, "3"),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_SwapN("2"),
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_ContCall(lbl_next)
        ]
    
    to-RISC: STC_Try(lbl) ->
        [STC_DupN("2"),
         STC_Swap(),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("x", 1))),
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         
         STC_ContSetR(FVM_Cont(Bind("x", 1))),
         STC_Dup(),
         STC_ContThis(),
         STC_ContSetR(FVM_Cont(Bind("n", 2))),
         STC_Dup(),
         STC_ContGet(FVM_Cont(Bind("c", 0))),
         STC_ContSetR(FVM_Cont(Bind("c", 0))),
         STC_ContCall(lbl)
        ]

rules

    to-RISC: STC_StringPush(string) -> <concat> [[
        STC_New(<int-to-string> <inc> length),
        STC_Dup(),
        STC_IPush(<int-to-string> length),
        STC_SetR(FVM_Path([FVM_Slot("0")]))], chars]  
      where
        string' := <fix-string-escaping> string;
        length := <string-length> string';
        chars := <concat> <map-with-index(to-char)> <explode-string> string'
          
    to-char: (idx, char) -> [STC_Dup(), STC_IPush(<int-to-string> char), STC_SetR(FVM_Path([FVM_Slot(<int-to-string> idx)]))]
