module fvm-desugar

imports
	signatures/framevm-sig
	desugar/toRISC
	desugar/fixSeq

signature
  sorts S
  constructors    
    FVM_Seq : [Instr] -> S
    FVM_Block : FVM_Label * FVM_Seq * INT -> S
    FVM_Program: INT * [FVM_Block] -> S
    
rules  
    desugar-full = desugar; to-RISC-all
    desugar = apply-aliasses; remove-pseudo; fix-seq; fix-paths-all
  
    remove-pseudo: FVM_Program(n, blocks) -> FVM_Program(n, <foldr(![], remove-pseudo)> blocks)
    remove-pseudo: (FVM_Block(lbl, body), list) -> ([FVM_Block(lbl, body) | list])
    remove-pseudo: (FVM_PseudoCode(body), list) -> (list)

	apply-aliasses: FVM_Program(FVM_InitSize(n), aliasses, blocks) -> FVM_Program(<string-to-int> n, <foldl(apply-aliasses)> (aliasses, blocks))
    apply-aliasses: FVM_ProgramNoInit(aliasses, blocks) -> FVM_Program(0, <foldl(apply-aliasses)> (aliasses, blocks))

	apply-aliasses: (alias, blocks) -> <topdown(try(apply-alias(|alias)))> blocks
	apply-alias(|alias): FVM_Link(from) -> FVM_Link(to) where FVM_LinkAlias(FVM_Link(from), FVM_Link(to)) := alias 
	apply-alias(|alias): FVM_Cont(from) -> FVM_Cont(to) where FVM_ContAlias(FVM_Cont(from), FVM_Cont(to)) := alias
	
	 
	resugar = resugar-seq; unfix-paths-all
	

    resugar-seq: FVM_Program(s, blocks) -> FVM_Program(FVM_InitSize(<int-to-string> s), [], <map(resugar-seq)> blocks)
    resugar-seq: FVM_Program(s, a, blocks) -> FVM_Program(FVM_InitSize(<int-to-string> s), a, <map(resugar-seq)> blocks)
    resugar-seq: FVM_Block(lbl, FVM_Seq(body)) -> FVM_Block(lbl, FVM_SeqJump(body2, last))
      where
      	(body2, last) := <split-init-last> body 

    fix-paths-all = bottomup(try(fix-paths))
    fix-paths: FVM_Path(path, term) -> FVM_Path(<concat> [path, [term]])
    fix-paths: FVM_Path(slot) -> FVM_Path([slot])
    
    
    unfix-paths-all = bottomup(try(unfix-paths))
    unfix-paths: FVM_Path([slot]) -> FVM_Path(slot)
    unfix-paths: FVM_Path(full_path) -> FVM_Path(path, term)
      where
      	(path, term) := <split-init-last> full_path;
      	_ := <geq> (<length> path, 1)