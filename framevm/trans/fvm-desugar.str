module fvm-desugar

imports
    signatures/framevm-sig
    signatures/fvm-stacy-sig
    signatures/fvm-roger-sig
    signatures/fvm-common-sig
    
    fvm-common
    
    desugar/fixSeq
    desugar/register
    desugar/strings
   
rules
    desugar = desugar-empty; cut-ext; split-header; apply-aliasses; fix-seq; fix-strings
    
    resugar = resugar-seq; resugar-aliasses; resugar-strings; unify-header
	
	cut-ext: (fname, ast) -> (<remove-extension> fname, ast)
	
   	desugar-empty: (fname, Empty(h, p)) -> (fname, STC_Program(h, p, [])) where <string-ends-with(|".stc")> fname
   	desugar-empty: (fname, Empty(h, p)) -> (fname, RGR_Program(h, p, [])) where <string-ends-with(|".rgr")> fname
   	desugar-empty: (fname, prog@STC_Program(_, _, _)) -> (fname, prog)
   	desugar-empty: (fname, prog@RGR_Program(_, _, _)) -> (fname, prog)
   	  
   	split-header: prog@STC_Program(_, _, _) -> <split-header> ("", prog)
   	split-header: (fname, STC_Program(FVM_Header(headeritems), _, blocks)) -> STC_Program(fname, imports, initsize, aliasses, blocks)
   	  with
   	  	imports := <map(try(apply-export(|fname)))> <filter(is-import)> headeritems;
   	  	aliasses := <filter(is-alias)> headeritems;
   	  	initsize := <getfirst(is-stc-init) <+ !(0, 99)> headeritems
   	 
   	 split-header: (fname, RGR_Program(FVM_Header(headeritems), _, blocks)) -> RGR_Program(fname, imports, initsize, aliasses, blocks)
   	  with
   	  	imports := <map(try(apply-export(|<remove-extension> fname)))> <filter(is-import)> headeritems;
   	  	aliasses := <filter(is-alias)> headeritems;
   	  	initsize := <getfirst(is-rgr-init) <+ !(0, 99)> headeritems
   	  	
   	unify-header: STC_Program(fname, imports, (n, _), aliasses, blocks) 
   		-> STC_Program(FVM_Header(<concat> [imports, [FVM_InitSize(<int-to-string> n)], aliasses]), None(), blocks)
   	unify-header: RGR_Program(fname, imports, (n, _), aliasses, blocks) 
   		-> RGR_Program(FVM_Header(<concat> [imports, [FVM_InitSize(<int-to-string> n)], aliasses]), None(), blocks)
   	 
   	unify-header: b@STC_Program(fname, imports, n, aliasses, blocks) -> <debug; fail> b
   	
   	is-import: i@FVM_Import(_, _) -> i
   	is-import: i@FVM_ImportAs(_, _, _) -> i
   	is-import: i@FVM_Export(_, _) -> i
   	
   	apply-export(|lib): FVM_Export(lbl, name) -> FVM_Export(lib, lbl, name)
   	
   	is-alias: f@FVM_LinkAlias(_, _) -> f
   	is-alias: f@FVM_ContAlias(_, _) -> f
   	
   	is-stc-init: FVM_InitSize(s) -> (<string-to-int> s, 99)
   	is-rgr-init: RGR_InitSize(Some(s), RGR_RegisterSize(r, l)) -> (<string-to-int> s, <string-to-int> l)
   	is-rgr-init: RGR_InitSize(None(),  RGR_RegisterSize(r, l)) -> (0, <string-to-int> l)
   	