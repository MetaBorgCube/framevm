module analysis/pseudoExp

imports

  signatures/-
  
rules
  pseudoExp [[PsdAdd(e1, e2) ^(s) : IntT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Addition requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Addition requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdMul(e1, e2) ^(s) : IntT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Multiplication requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Multiplication requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdSub(e1, e2) ^(s) : IntT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Subtraction requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Subtraction requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdDiv(e1, e2) ^(s) : IntT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Division requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Division requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdLt(e1, e2) ^(s) : BoolT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Comparison requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Comparison requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdGt(e1, e2) ^(s) : BoolT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Comparison requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Comparison requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdEq(e1, e2) ^(s) : BoolT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Comparison requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Comparison requires an integer, not a [ty2]].
  
  pseudoExp [[PsdNeq(e1, e2) ^(s) : BoolT()]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == IntT() | error $[Comparison requires an integer, not a [ty1]],
  	pseudoExp [[e2 ^(s) : ty2]],
  	ty2 == IntT() | error $[Comparison requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdSubScript(arr, idx) ^(s) : arrty]] :=
  	pseudoExp [[e1 ^(s) : ty1]],
  	ty1 == ArrayT(arrty) | error $[Array lookups require an array, not a [ty1]],
  	pseudoExp [[idx ^(s) : ty2]],
  	ty2 == IntT() | error $[Index requires an integer, not a [ty2]].
  	
  pseudoExp [[PsdNew(recName, args) ^(s) : ty]] :=
  	PsdRec{recName} -> s,
  	PsdRec{recName} |-> d | error $[Record not defined [recName]],
  	d : recTy,
  	ty == recTy,
  	recTy == RecT(rec, argtys),
  	Map1T(pseudoExp) [[args ^(s) : argtys]].
  	
  	
  pseudoExp [[PsdInt(_)  ^(s) : IntT()]].  	
  pseudoExp [[PsdBool(_) ^(s) : BoolT()]].
  
  pseudoExp [[PsdFunApp(ref, args) ^(s) : ty]] :=
  	Map1T(pseudoExp) [[args ^(s) : argtys]],
  	pseudoFuncRef[[ref ^(s): funty]],
  	funty == FunT(argtys, retty),
  	ty == retty.
  
  pseudoFuncRef [[PsdID(ref) ^(s) : ty]] :=
  	PsdFunc{ref} -> s,
  	PsdFunc{ref} |-> d | error $[Function [ref] not found],
  	d : ty!.
  	
  pseudoFuncRef [[PsdRef(PsdID(ref), tail) ^(s) : ty]] :=
  	PsdVar{ref} -> s,
  	PsdVar{ref} |-> d | error $[Object [ref] not found],
  	PsdVar{ref} <=== as,
  	pseudoFuncRef [[tail ^(as) : ty]].
  	
  pseudoExp [[PsdRef(PsdID(ref), tail) ^(s) : ty]] :=
  	PsdVar{ref} -> s,
  	PsdVar{ref} |-> d | error $[Object [ref] not found],
  	d : RecT(occ, _),
  	occ ?===> as,
  	new reci, reci ---> as,
  	pseudoExp [[tail ^(reci) : ty2]], ty == ty2.
  	
  pseudoExp[[PsdID(name) ^(s) : ty]] :=
  	PsdVar{name} -> s,
  	PsdVar{name} |-> d | error $[Variable [name] not defined],
  	d : ty!.
  
  pseudoType [[Int()  ^(s) : IntT()]].
  pseudoType [[Bool() ^(s) : BoolT()]].
  pseudoType [[Class(name) ^(s) : ty]] :=
  	PsdRec{name} -> s,
  	PsdRec{name} |-> d | error $[Rec [name] not defined],
  	d : ty!.
  	
  	
//  PsdExp.PsdFunApp = <<PsdExp>(<{PsdExp ","}*>)>	{left}
//  PsdExp.PsdList = <[<{PsdExp ","}*>]>
//  PsdExp.PsdRef = <<PsdExp>.<PsdExp>>				{left}