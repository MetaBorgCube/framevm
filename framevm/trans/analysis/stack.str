module stack

imports
	signatures/framevm-sig
	fvm-desugar

rules
	// check stack sizes of blocks
	stack-calc: FVM_Program(s, blocks, l) -> FVM_Program(s, out_blocks, l)
	  where
    	(errors, out_blocks) := <unzip><mapconcat(stack-calc)> blocks
  
	stack-calc: f@FVM_PseudoCode(body) -> [([], f)]

  	stack-calc: FVM_Block(FVM_Label(lbl), FVM_Seq(body)) -> [(errors, FVM_Block(FVM_Label(lbl), FVM_Seq(body), size))]
  	  where
  		(size, errors) := <foldl(stack-update)>(body, (0, []))
  
  	stack-update: (instr, (size, err)) -> (new_size, err)
  	  where
  	  	new_size := <addi> (size, <stack-delta> instr);
  	  	_ := <geq> (new_size, 0)
  	  	
  	 stack-update: (instr, (size, errs)) -> (new_size, [err | errs])
  	  where
  	  	new_size := <addi> (size, <stack-delta> instr);
  	  	err := <debug> ("Popping from empty stack at", instr)
  	  	
	// For each operation, calculate the change in stack size
	stack-delta: FVM_IPush(_) -> 1
	stack-delta: FVM_INeg()   -> 0
	stack-delta: FVM_IAdd()   -> -1
	stack-delta: FVM_IMul()   -> -1
	stack-delta: FVM_ISub()   -> -1
	stack-delta: FVM_IDiv()   -> -1
	stack-delta: FVM_IMod()   -> -1
	
	stack-delta: FVM_IEq()    -> -1
	stack-delta: FVM_ILt()    -> -1
	stack-delta: FVM_IGt()    -> -1
	stack-delta: FVM_IOr()    -> -1
	stack-delta: FVM_IXor()   -> -1
	stack-delta: FVM_IAnd()   -> -1
  
	stack-delta: FVM_New(_)   -> 1
	stack-delta: FVM_New()    -> 1
	stack-delta: FVM_NewR()   -> 0
	
	stack-delta: FVM_Pop()    -> -1
	stack-delta: FVM_Dup()    -> 1
	stack-delta: FVM_DupN(_)  -> 1
	stack-delta: FVM_Swap()   -> 0
	stack-delta: FVM_SwapN(_) -> 0
  
	stack-delta: FVM_Link(_, _) -> -1
	stack-delta: FVM_LinkR(_)   -> -2
  
	stack-delta: FVM_Get()      -> 0
	stack-delta: FVM_Get(path)  -> 1
	stack-delta: FVM_GetR()     -> -1
	stack-delta: FVM_GetR(path) -> 0
  
	stack-delta: FVM_Set()      -> -2
	stack-delta: FVM_Set(path)  -> -1
	stack-delta: FVM_SetR()     -> -3
	stack-delta: FVM_SetR(path) -> -2
	
	stack-delta: FVM_ContSet()      -> -2
	stack-delta: FVM_ContSet(cont)  -> -1
	stack-delta: FVM_ContSetR()     -> -3
	stack-delta: FVM_ContSetR(path) -> -2
	
	stack-delta: FVM_ContGet()      -> 0
	stack-delta: FVM_ContGet(path)  -> 1
	stack-delta: FVM_ContGetR()     -> -1
	stack-delta: FVM_ContGetR(path) -> 0
	
	stack-delta: FVM_ContTransfer(n)    -> <dec> <subti> (0, <string-to-int> n)
	stack-delta: FVM_ContTransfer(n, _) -> <subti> (0, <string-to-int> n)
	
	stack-delta: FVM_ContRGetN(n) -> <string-to-int> n
	stack-delta: FVM_ContRGet()   -> 1
  
	stack-delta: FVM_Print()  -> -1
	stack-delta: FVM_Return() -> -1
	stack-delta: FVM_ReturnN(n) -> <string-to-int> n
  
	stack-delta: FVM_Copy()  -> 1
	stack-delta: FVM_CopyR() -> 0
  
	stack-delta: FVM_JumpZ(lbl1, lbl2) -> -1
	stack-delta: FVM_Jump(lbl) -> 0
	stack-delta: FVM_Call(lbl1, lbl2) -> -1
	stack-delta: FVM_Call(lbl) -> -1
	stack-delta: FVM_TailCall(lbl) -> -1
	stack-delta: FVM_TailCall() -> -1
	
	
	stack-delta: FVM_ContThis() -> 1
	stack-delta: FVM_ContNew(lbl, _) -> 0
	
	stack-delta: FVM_ContCall(_) -> -1
	stack-delta: FVM_ContReturn() -> -1
	stack-delta: FVM_ContReturn(_) -> 0
	
	stack-delta: FVM_ScopeNew(_, lbl) -> -1
	stack-delta: FVM_ScopeNew(_)    -> -1
	stack-delta: FVM_ScopeSetCurrent()    -> -1
	
	stack-delta: FVM_ScopeExit(path) -> 0
	stack-delta: FVM_ScopeExit(path, lbl) -> 0
	
	stack-delta: FVM_Try(_, _, _) -> -2
	stack-delta: FVM_Try(_) -> -2
	stack-delta: FVM_Throw() -> -1
	stack-delta: FVM_Yield(_) -> -1
	
	stack-delta: FVM_Debug() -> 0
	
	stack-delta: FVM_IsInt()   -> 0
	stack-delta: FVM_IsCont()  -> 0
	stack-delta: FVM_IsFrame() -> 0
  
  	stack-delta: a -> 0
  	  where
  		_ := <debug> ("Stack calculations not implemented for", a)
