module stack

imports
	signatures/framevm-sig

rules

	// check stack sizes of blocks
	stack-calc: Program(blocks) -> Program(out_blocks)
	  where
    	(errors, out_blocks) := <unzip><mapconcat(stack-calc)> blocks
  
	stack-calc: PseudoCode(_) -> []
  
  	stack-calc: Block(Label(lbl), SeqNoJump(body)) -> [(errors, Block(Label(lbl), SeqNoJump(body)))]
  	where
  		(size, errors) := <foldl(stack-update)>(body, (0, []));
  		_ := <debug> ("Stack size after block", lbl, size);
  		_ := <debug> ("Block not ended by a control instruction", lbl)
  		// If size > 0 give warning
  		
  	stack-calc: Block(Label(lbl), Seq(body, jmp)) -> [(errors, Block(Label(lbl), Seq(body, jmp)))]
  	  where
  		(size, errors) := <foldl(stack-update)>(<concat> [body, [jmp]], (0, []));
  		_ := <debug> ("Stack size after block", lbl, size)
  		// If size > 0 give warning
  
	// For each operation, calculate the change in stack size
	stack-update: (IConst(_), (size, err)) 	-> (<inc> size, err)
	stack-update: (IAdd(), (size, err)) 	-> (<dec> size, err)
	stack-update: (IEq(), (size, err)) 		-> (<dec> size, err)
	stack-update: (ILt(), (size, err)) 		-> (<dec> size, err)
  
	stack-update: (New(), (size, err)) 		-> (<inc> size, err)
	stack-update: (Dup(), (size, err)) 		-> (<inc> size, err)
	stack-update: (Swap(), (size, err)) 	-> (size, err)
  
	stack-update: (Link(_, _), (size, err)) -> (<dec> size, err)
	stack-update: (LinkR(_), (size, err))   -> (<dec><dec> size, err) 
  
	stack-update: (Get(path), (size, err)) 	-> (<inc> size, err)
	stack-update: (GetR(path), (size, err)) -> (size, err)
  
	stack-update: (Set(path), (size, err)) 	-> (<dec> size, err)
	stack-update: (SetR(path), (size, err)) -> (<dec><dec> size, err)
  
	stack-update: (Print(), (size, err)) 	-> (<dec> size, err)
	stack-update: (Return(), (size, err))	-> (<dec> size, err)
  
  
	stack-update: (JumpZ(lbl1, lbl2), (size, err)) 	-> (<dec> size, err)
	stack-update: (Jump(lbl), (size, err)) 		    -> (size, err)
	stack-update: (Call(lbl1, lbl2), (size, err)) 	-> (<dec> size, err)
	
	stack-update: (ScopeUp(path, lbl), (size, err)) -> (size, err)
	stack-update: (ScopeDown(lbl), (size, err)) 	-> (<dec> size, err)
	
	
	
	stack-update: (Debug(), (size, err)) 	-> (size, err)

  
  	stack-update: (a, (size, err)) -> (size, err)
  	  where
  		_ := <debug> ("Stack calculations not implemented for", a)
