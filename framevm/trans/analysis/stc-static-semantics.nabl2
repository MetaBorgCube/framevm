module analysis/stc-static-semantics

imports

  signatures/-
  analysis/static-semantics-common
  
rules
  prog[[STC_Program(fname, imports, size, b, a, blocks) ^(s)]] :=
    new prog,
    Map1(block)[[blocks ^(prog)]],
    
    new mod, mod ---> s,
    STC_Module{fname} <- s,
    STC_Module{fname}.blocks  := blocks,
    STC_Module{fname}.imports := imports,
    STC_Module{fname} ===> mod,
    initBlock[[b ^(prog)]],
    Map2(stcImport)[[imports ^(mod, prog)]].
      

  instr[[STC_CharPush(_) ^(s)]].
  instr[[STC_IPush(_) ^(s)]].
  instr[[STC_INeg() ^(s)]].
  instr[[STC_IAdd() ^(s)]].
  instr[[STC_ISub() ^(s)]].
  instr[[STC_IMul() ^(s)]].
  instr[[STC_IDiv() ^(s)]].
  instr[[STC_IMod() ^(s)]].

  instr[[STC_IEq() ^(s)]].
  instr[[STC_ILt() ^(s)]].
  instr[[STC_IGt() ^(s)]].
  instr[[STC_IOr() ^(s)]].
  instr[[STC_IXor() ^(s)]].
  instr[[STC_IAnd() ^(s)]].

  instr[[STC_Pop() ^(s)]].
  instr[[STC_Dup() ^(s)]].
  instr[[STC_DupN(_) ^(s)]].

  instr[[STC_Swap() ^(s)]].
  instr[[STC_SwapN(_) ^(s)]].

  instr[[STC_Print() ^(s)]].
  instr[[STC_PrintChar() ^(s)]].
  instr[[STC_Debug() ^(s)]].
  instr[[STC_DebugKill() ^(s)]].
  

  instr[[STC_FSize() ^(s)]].
  instr[[STC_New(_) ^(s)]].
  instr[[STC_New() ^(s)]].
  instr[[STC_NewR() ^(s)]].

  instr[[STC_Set() ^(s)]].
  instr[[STC_Set(path) ^(s)]]  := bind[[path ^(s)]].
  instr[[STC_SetR() ^(s)]].
  instr[[STC_SetR(path) ^(s)]] := bind[[path ^(s)]].
  instr[[STC_Get() ^(s)]].
  instr[[STC_Get(path) ^(s)]]  := bind[[path ^(s)]].
  instr[[STC_GetR() ^(s)]].
  instr[[STC_GetR(path) ^(s)]] := bind[[path ^(s)]].

  instr[[STC_ContSet() ^(s)]].
  instr[[STC_ContSet(path) ^(s)]]  := bind[[path ^(s)]].
  instr[[STC_ContSetR() ^(s)]].
  instr[[STC_ContSetR(path) ^(s)]] := bind[[path ^(s)]].
  instr[[STC_ContGet() ^(s)]].
  instr[[STC_ContGet(path) ^(s)]]  := bind[[path ^(s)]].
  instr[[STC_ContGetR() ^(s)]].
  instr[[STC_ContGetR(path) ^(s)]] := bind[[path ^(s)]].

  instr[[STC_ContTransfer() ^(s)]].
  instr[[STC_ContTransfer(n) ^(s)]].
  instr[[STC_ContTransfer(n, path) ^(s)]] := bind[[path ^(s)]].

  instr[[STC_ContRGetN(n) ^(s)]].
  instr[[STC_ContRGet() ^(s)]].

  instr[[STC_Return() ^(s)]].
  instr[[STC_Throw() ^(s)]].

  instr[[STC_Link(bind1, bind2) ^(s)]] := bind[[bind1 ^(s)]], bind[[bind2 ^(s)]].
  instr[[STC_LinkR(bind) ^(s)]] := bind[[bind ^(s)]].

  instr[[STC_ContCopy( policy1, policy2) ^(s)]] := policy1 == policy2 | note $[Are you sure? This unlinks the references to the heap from the copied heap].
  instr[[STC_ContCopyR(policy1, policy2) ^(s)]] := policy1 == policy2 | note $[Are you sure? This unlinks the references to the heap from the copied heap].
  instr[[STC_FrameCopy(_) ^(s)]].
  instr[[STC_FrameCopyR(_) ^(s)]].

  instr[[STC_IsInt() ^(s)]].
  instr[[STC_IsCont() ^(s)]].
  instr[[STC_IsFrame() ^(s)]].
  instr[[STC_IsClos() ^(s)]].


  instr[[STC_ContThis() ^(s)]].
  instr[[STC_ContNew(lbl, _) ^(s)]] := lbl[[lbl ^(s)]].
  instr[[STC_ContNewR(lbl) ^(s)]] := lbl[[lbl ^(s)]].
  instr[[STC_Yield(lbl) ^(s)]] := lbl[[lbl ^(s)]].
  instr[[STC_ContCall(lbl) ^(s)]] := lbl[[lbl ^(s)]].
  instr[[STC_ContCall(path, lbl) ^(s)]] := lbl[[lbl ^(s)]], bind[[path ^(s)]].
  instr[[STC_ContReturn(path) ^(s)]] := bind[[path ^(s)]].
  instr[[STC_ContReturn() ^(s)]].
    
  instr[[STC_Jump(lbl) ^(s)]]             := lbl[[lbl ^(s)]].
  instr[[STC_JumpZ(lbl1, lbl2) ^(s)]]     := lbl[[lbl1 ^(s)]], lbl[[lbl2 ^(s)]].
  instr[[STC_Call(lbl) ^(s)]]             := lbl[[lbl ^(s)]].
  instr[[STC_Call(lbl1, lbl2) ^(s)]]      := lbl[[lbl1 ^(s)]], lbl[[lbl2 ^(s)]].
  instr[[STC_Try(lbl1, lbl2, lbl3) ^(s)]] := lbl[[lbl1 ^(s)]], lbl[[lbl2 ^(s)]], lbl[[lbl3 ^(s)]].
  instr[[STC_Try(lbl) ^(s)]]              := lbl[[lbl ^(s)]].
  instr[[STC_TailCall() ^(s)]].
  instr[[STC_TailCall(lbl) ^(s)]]         := lbl[[lbl ^(s)]].
    
  instr[[STC_ScopeNew(bind, lbl) ^(s)]]  := lbl[[lbl ^(s)]], bind[[bind ^(s)]].
  instr[[STC_ScopeNew(bind) ^(s)]]       := bind[[bind ^(s)]].
  instr[[STC_ScopeSetCurrent() ^(s)]].
  instr[[STC_ScopeGetCurrent() ^(s)]].
  instr[[STC_ScopeExit(bind) ^(s)]]      := bind[[bind ^(s)]].
  instr[[STC_ScopeExit(bind, lbl) ^(s)]] := bind[[bind ^(s)]], lbl[[lbl ^(s)]].
  
  instr[[STC_ClosNew(_, lbl, _) ^(s)]] := lbl[[lbl ^(s)]].
  instr[[STC_ClosNew(lbl, _) ^(s)]]    := lbl[[lbl ^(s)]].
  instr[[STC_ClosToCont() ^(s)]].
  instr[[STC_ClosUnpack() ^(s)]].
    
  instr[[STC_StringPush(_) ^(s)]].
  instr[[STC_REq() ^(s)]].
