module analysis/static-semantics

imports

  signatures/-
  analysis/pseudo
  
signature
	namespaces Var

name resolution
  labels
    P I

  order
    D < P,
    D < I,
	I < P

  well-formedness
	P* I*

rules

  init ^ (s) := new s.
  
  [[FVM_Program(size, blocks, _) ^(s)]] :=
  	Map1(block)[[blocks ^(s)]].
  
  block[[FVM_PseudoCode(body) ^(s)]] :=
  	new pseudo, pseudo ---> s,
  	pseudo [[body ^(pseudo)]]. 
  	
  block[[FVM_Block(FVM_Label(name), FVM_Seq(body), size) ^(s)]] :=
  	new block, 
  	Block{name} <- s,
  	distinct/name D(s)/Block | error $[Redefinition of label] @NAMES,
  	Block{name} ===> block,
  	block ---> s,
  	Map1(instr)[[body ^(block)]],
  	size == 0 | warning $[Stack delta is non-zero: [size]] @name.
  	
  lbl[[FVM_Label(name) ^(s)]] :=
  	Block{name} -> s,
  	Block{name} |-> d | error $[Unknown jump label [name]] @name.
  	
  	
instr[[FVM_IPush(_) ^(s)]].
instr[[FVM_INeg() ^(s)]].
instr[[FVM_IAdd() ^(s)]].
instr[[FVM_ISub() ^(s)]].
instr[[FVM_IMul() ^(s)]].
instr[[FVM_IDiv() ^(s)]].
instr[[FVM_IMod() ^(s)]].

instr[[FVM_IEq() ^(s)]].
instr[[FVM_ILt() ^(s)]].
instr[[FVM_IGt() ^(s)]].
instr[[FVM_IOr() ^(s)]].
instr[[FVM_IXor() ^(s)]].
instr[[FVM_IAnd() ^(s)]].

instr[[FVM_Pop() ^(s)]].
instr[[FVM_Dup() ^(s)]].
instr[[FVM_DupN(_) ^(s)]].

instr[[FVM_Swap() ^(s)]].
instr[[FVM_SwapN(_) ^(s)]].

instr[[FVM_Print() ^(s)]].
instr[[FVM_Debug() ^(s)]].
  

instr[[FVM_New(_) ^(s)]].
instr[[FVM_New() ^(s)]].
instr[[FVM_NewR() ^(s)]].

instr[[FVM_Set() ^(s)]].
instr[[FVM_Set(_) ^(s)]].
instr[[FVM_SetR() ^(s)]].
instr[[FVM_SetR(_) ^(s)]].
instr[[FVM_Get() ^(s)]].
instr[[FVM_Get(_) ^(s)]].
instr[[FVM_GetR() ^(s)]].
instr[[FVM_GetR(_) ^(s)]].

instr[[FVM_ContSet() ^(s)]].
instr[[FVM_ContSet(_) ^(s)]].
instr[[FVM_ContSetR() ^(s)]].
instr[[FVM_ContSetR(_) ^(s)]].
instr[[FVM_ContGet() ^(s)]].
instr[[FVM_ContGet(_) ^(s)]].
instr[[FVM_ContGetR() ^(s)]].
instr[[FVM_ContGetR(_) ^(s)]].

instr[[FVM_ContTransfer(n) ^(s)]].
instr[[FVM_ContTransfer(n, _) ^(s)]].

instr[[FVM_ContRGetN(n) ^(s)]].
instr[[FVM_ContRGet() ^(s)]].
	
instr[[FVM_ContUnpack() ^(s)]].
instr[[FVM_Return() ^(s)]].
instr[[FVM_Throw() ^(s)]].

instr[[FVM_Link(_, _) ^(s)]].
instr[[FVM_LinkR(_) ^(s)]].

instr[[FVM_Copy() ^(s)]].
instr[[FVM_CopyR() ^(s)]].

instr[[FVM_IsInt() ^(s)]].
instr[[FVM_IsCont() ^(s)]].
instr[[FVM_IsFrame() ^(s)]].


	instr[[FVM_ContThis() ^(s)]].
	instr[[FVM_ContNew(lbl, _) ^(s)]] := lbl[[lbl ^(s)]].
	instr[[FVM_Yield(lbl) ^(s)]] := lbl[[lbl ^(s)]].
	instr[[FVM_ContCall(lbl) ^(s)]] := lbl[[lbl ^(s)]].
	instr[[FVM_ContCall(_, lbl) ^(s)]] := lbl[[lbl ^(s)]].
	instr[[FVM_ContReturn(_) ^(s)]].
	instr[[FVM_ContReturn() ^(s)]].
	
	instr[[FVM_Jump(lbl) ^(s)]]  := lbl[[lbl ^(s)]].
	instr[[FVM_JumpZ(lbl1, lbl2) ^(s)]]  := lbl[[lbl1 ^(s)]], lbl[[lbl2 ^(s)]].
	instr[[FVM_Call(lbl) ^(s)]]  := lbl[[lbl ^(s)]].
	instr[[FVM_Call(lbl1, lbl2) ^(s)]]  := lbl[[lbl1 ^(s)]], lbl[[lbl2 ^(s)]].
	instr[[FVM_Try(lbl1, lbl2, lbl3) ^(s)]]  := lbl[[lbl1 ^(s)]], lbl[[lbl2 ^(s)]], lbl[[lbl3 ^(s)]].
	instr[[FVM_Try(lbl) ^(s)]] := lbl[[lbl ^(s)]].
	
	instr[[FVM_ScopeNew(lbl) ^(s)]]  := lbl[[lbl ^(s)]].
	instr[[FVM_ScopeNew() ^(s)]].
	instr[[FVM_ScopeExit(_, lbl) ^(s)]]  := lbl[[lbl ^(s)]].
	instr[[FVM_ScopeExit(_) ^(s)]].
