module control

imports 
    signatures/fvm-roger-sig
    signatures/fvm-common-sig
    interpreter/external
    
    interpreter/roger/exp/-
    interpreter/roger/roger
    
    fvm-common

rules
    rgr-eval: (RGR_Return(exps), env) -> env4
      where
        (env2, vals) := <(rgr-eval-exp-fold(|env))> exps;
        ret_cont := <cont-get-cc(|env2)> <cf-this(|env2)>;
        env3 := <cont-call(|env2)> ret_cont;
        env4 := <vm-transfer(|env3)> vals
        
    rgr-eval: (RGR_Throw(exp), env) -> env4
      where
        (env2, val) := <rgr-eval-exp(|env)> exp;
        continuation := <ex-get-cx(|env2)> <cf-this(|env2)>;
        env3 := <cont-call(|env2)> continuation;
        env4 := <vm-transfer(|env3)> [val]
        
    rgr-eval: (RGR_Yield(exp, lbl_exp), env) -> env6
      where
        (env2, BlockRef(lib, block)) := <rgr-eval-exp(|env)> lbl_exp;
        cf := <cf-this(|env)>;
        (env3, val) := <rgr-eval-exp(|env2)> exp;
        ret_cf := <cont-get-cc(|env3)> <cf-this(|env2)>;
        (env4, cont) := <vm-cont-new(|env3)> (cf, (lib, block));
        env5 := <cont-call(|env4)> ret_cf;
        env6 := <vm-transfer(|env5)> [val, Continuation(cont)]
        
    rgr-eval: (RGR_JumpZ(exp, then_exp, else_exp), env1) -> env5
      where
        (env2, IntV(val)) := <rgr-eval-exp(|env1)> exp;
        (env3, BlockRef(thenlib, thenlbl)) := <rgr-eval-exp(|env2)> then_exp;
        (env4, BlockRef(elselib, elselbl)) := <rgr-eval-exp(|env3)> else_exp;
        
        trgt := <jump-eval> (val, (thenlib, thenlbl), (elselib, elselbl));
        env5 := <vm-jump(|env4)> trgt
        
    rgr-eval: (RGR_Jump(lbl_exp), env) -> env2
      where
        (env2, BlockRef(lib, lbl)) := <rgr-eval-exp(|env)> lbl_exp;
        env3 := <vm-jump(|env2)> (lib, lbl)
        
    rgr-eval: (RGR_Call(exp, flbl_exp, rlbl_exp), env) -> env10
      where
        (env2, BlockRef(flib, flbl)) := <rgr-eval-exp(|env)> flbl_exp;
        (env3, BlockRef(rlib, rlbl)) := <rgr-eval-exp(|env2)> rlbl_exp;
        (env4, FrameRef(frame)) := <rgr-eval-exp(|env3)> exp;
        (env5, func_cf) := <vm-cf-new(|env4)> (frame, 2);
        (env6, func) := <vm-cont-new(|env5)> (func_cf, (flib, flbl));
        cf_this := <cf-this(|env6)>;
        (env7, cont_this) := <vm-cont-new(|env6)> (cf_this, (rlib, rlbl));
        env8 := <cont-set-cc(|env7)> (func_cf, cont_this);
        ex := <ex-get-cx(|env8)> cf_this;
        env9 := <ex-set-cx(|env8)> (func_cf, ex);
        
        env10 := <vm-jump(|env9)> (rlib, rlbl);
        env11 := <cont-call(|env10)> func
        
    rgr-eval: (RGR_Call(exp, lbl_exp), env) -> env8
      where
        (env2, Continuation(func)) := <rgr-eval-exp(|env)> exp;
        (env3, BlockRef(lib, lbl)) := <rgr-eval-exp(|env2)> lbl_exp;
        cf_this := <cf-this(|env3)>;
        func_cf := <cont-get-cf(|env3)> func;
        (env4, cont_this) := <vm-cont-new(|env3)> (cf_this, (lib, lbl));
        env5 := <cont-set-cc(|env4)> (func_cf, cont_this);
        ex := <ex-get-cx(|env5)> cf_this;
        env6 := <ex-set-cx(|env5)> (func_cf, ex);
        
        env7 := <vm-jump(|env6)> (lib, lbl);
        env8 := <cont-call(|env7)> func
         
    rgr-eval: (RGR_TailCall(exp, lblexp), env) -> env8
      where
        (env2, FrameRef(frame)) := <rgr-eval-exp(|env)> exp;
        (env3, BlockRef(flib, flbl)) := <rgr-eval-exp(|env)> lblexp;
        (env4, func_cf) := <vm-cf-new(|env3)> (frame, 2);
        (env5, func) := <vm-cont-new(|env4)> (func_cf, (flib, flbl));
        cf_this := <cf-this(|env5)>;
        return := <cont-get-cc(|env5)> cf_this;
        env6 := <cont-set-cc(|env5)> (func_cf, return);
        ex := <ex-get-cx(|env6)> cf_this;
        env7 := <ex-set-cx(|env6)> (func_cf, ex);
        env8 := <cont-call(|env7)> func
        
    rgr-eval: (RGR_TailCall(exp), env) -> env4
      where
        (env2, Continuation(func_c)) := <rgr-eval-exp(|env)> exp;
        cf_this := <cf-this(|env2)>;
        return := <cont-get-cc(|env2)> cf_this;
        func_cf := <cont-get-cf(|env2)> func_c;
        env3 := <cont-set-cc(|env2)> (func_cf, return);
        ex := <ex-get-cx(|env3)> cf_this;
        env4 := <ex-set-cx(|env3)> (func_cf, ex);
        env5 := <cont-call(|env4)> func_c
     
    rgr-eval: (RGR_CFCall(exp, lblexp), env1) -> env4 
      where
        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env1)> exp;
        (env3, BlockRef(lib, lbl)) := <rgr-eval-exp(|env2)> lblexp;
        env4 := <vm-jump(|env3)> (lib, lbl);
        env5 := <cf-call(|env4)> cf
        
//    rgr-eval: (RGR_CFReturn(exp), env1) -> env3 
//      where
//        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env1)> exp;
//        env3 := <cf-call(|env2)> cf
     
    rgr-eval: (RGR_ContCall(exp), env1) -> env3
      where
        (env2, Continuation(cont)) := <rgr-eval-exp(|env1)> exp;
        env3 := <cont-call(|env2)> cont
        
   rgr-eval: (RGR_ContCallWith(exp, exps), env1) -> env5
      where
        (env2, Continuation(cont)) := <rgr-eval-exp(|env1)> exp;
        (env3, vals) := <(rgr-eval-exp-fold(|env2))> exps;
        env4 := <cont-call(|env3)> cont;
        env5 := <vm-transfer(|env4)> vals
  
    rgr-eval: (RGR_Try(exptry, trylbl, 
                       expcatch, catchlbl, 
                       ret_lbl), env1) -> env19
      where
        (env2, BlockRef(lib_try, lbl_try))     := <rgr-eval-exp(|env1)> trylbl;
        (env3, BlockRef(lib_catch, lbl_catch)) := <rgr-eval-exp(|env2)> catchlbl;
        (env4, BlockRef(lib_cont, lbl_cont)) := <rgr-eval-exp(|env3)> ret_lbl;
        this_cf := <cf-this(|env4)>;
        (env5, cont_this) := <vm-cont-new(|env4)> (this_cf, (lib_cont, lbl_cont));
        cont := <cont-get-cc(|env4)> this_cf;
        ex   := <ex-get-cx(|env4)> this_cf;
         
        (env6, FrameRef(frame_try))   := <rgr-eval-exp(|env5)> exptry;
        (env7, FrameRef(frame_catch)) := <rgr-eval-exp(|env6)> expcatch;
          
        (env8, catch_cf)   := <vm-cf-new(|env7)> (frame_catch, 3);
        (env9, catch_cont) := <vm-cont-new(|env8)> (catch_cf, (lib_catch, lbl_catch));
        (env10, try_cf)     := <vm-cf-new(|env9)> (frame_try, 3);
        (env11, try_cont)   := <vm-cont-new(|env10)> (try_cf, (lib_try, lbl_try), 3);
        
        env12 := <cont-set-cc(|env11)> (try_cf, cont);
        env13 := <ex-set-cx(|env12)>   (try_cf, catch_cont);
          
        env14 := <cont-set-cc(|env13)> (catch_cf, cont);
        env15 := <ex-set-cx(|env14)>   (catch_cf, ex);
          
        env16  := <cont-set(|env15)>  (try_cf,   ("n", 2), cont_this);
        env17  := <cont-set(|env16)> (catch_cf, ("n", 2), cont_this);
        env18 := <vm-jump(|env17)>  (lib_cont, lbl_cont);
        env19 := <cont-call(|env18)> try_cont
        
     rgr-eval: (RGR_Try(exptry, expcatch, ret_lbl), env1) -> env12
      where
        this_cf := <cf-this(|env1)>;
        ret_c := <cont-get-cc(|env1)> this_cf;
        ex_c   := <ex-get-cx(|env1)> this_cf;
          
        (env2, Continuation(try_c))   := <rgr-eval-exp(|env1)> exptry;
        (env3, Continuation(catch_c)) := <rgr-eval-exp(|env2)> expcatch;
        (env4, BlockRef(lib_cont, lbl_cont)) := <rgr-eval-exp(|env3)> ret_lbl;
        
        try_cf   := <cont-get-cf(|env4)> try_c;
        catch_cf := <cont-get-cf(|env4)> catch_c;
        env5 := <cont-set-cc(|env4)> (try_cf, ret_c);
        env6 := <ex-set-cx(|env5)>   (try_cf, catch_c);
          
        env7 := <cont-set-cc(|env6)> (catch_cf, ret_c);
        env8 := <ex-set-cx(|env7)>   (catch_cf, ex_c);
        
        (env9, this_c) := <vm-cont-new(|env8)> (this_cf, (lib_cont, lbl_cont));
        
        env10 := <cont-set(|env9)> (try_cf,   ("n", 2), this_c);
        env11 := <cont-set(|env10)> (catch_cf, ("n", 2), this_c);
        env12 := <cont-call(|env11)> try_c
        

	rgr-eval: (RGR_ScopeNew(exp, FVM_Link(Bind(lbl, idx)), lbl_exp), env) -> env6
	  where
	    frame_this := <frame-this(|env)>;
        (env2, FrameRef(frame_to)) := <rgr-eval-exp(|env)> exp;
        (env3, BlockRef(lib, block)) := <rgr-eval-exp(|env2)> lbl_exp;
        env4 := <frame-link(|env3)> (frame_to, frame_this, (lbl, idx));
        env5 := <frame-set-current(|env4)> (<cf-this(|env3)>, frame_to);
        env6 := <vm-jump(|env5)> (lib, block)

	rgr-eval: (RGR_ScopeExit(FVM_Path(path), lbl_exp), env) -> env4
	  where
	    FrameRef(frame) := <rgr-get-path(|env)> (FrameRef(<frame-this(|env)>), path);
        (env2, BlockRef(lib, block)) := <rgr-eval-exp(|env)> lbl_exp;
	    env3 := <frame-set-current(|env2)>  (<cf-this(|env)>, frame);
        env4 := <vm-jump(|env3)> (lib, block)
        