module arithmetic

imports 
    signatures/fvm-roger-sig
    interpreter/external
    interpreter/util
    
    fvm-common

rules
    rgr-eval-exp(|env): RGR_ILoad(i) -> (env, IntV(<string-to-int> i))
    
    rgr-eval-exp(|env): RGR_INeg(exp) -> (env2, IntV(<subti> (0, i)))
      where
        (env2, IntV(i)) := <rgr-eval-exp(|env)> exp
    
    rgr-eval-exp(|env): RGR_IAdd(a, b) -> (env3, IntV(<addi> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)>  a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_ISub(a, b) -> (env3, IntV(<subti> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)>  a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IMul(a, b) -> (env3, IntV(<muli> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IDiv(a, b) -> (env3, IntV(<divi> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IMod(a, b) -> (env3, IntV(<modi> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IEq(a, b) -> (env, <eval-eq> (a', b'))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_ILt(a, b) -> (env, <eval-lt> (a', b'))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IGt(a, b) -> (env3, <eval-lt> (b', a'))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IOr(a, b) -> (env, IntV(<iori> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IXor(a, b) -> (env, IntV(<xori> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
    
    rgr-eval-exp(|env): RGR_IAnd(a, b) -> (env3, IntV(<andi> (a', b')))
      where
        (env2, IntV(a')) := <rgr-eval-exp(|env)> a;
        (env3, IntV(b')) := <rgr-eval-exp(|env2)> b
        
        
        