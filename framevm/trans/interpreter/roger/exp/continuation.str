module continuation

imports 
    signatures/fvm-roger-sig
    signatures/fvm-common-sig
    interpreter/external
    interpreter/util
    
    fvm-common

rules
    rgr-eval-exp(|env): RGR_CFThis() -> (env, ControlFrame(<cf-this(|env)>))
    rgr-eval-exp(|env): RGR_CFNew(exp1, exp2, exp3) -> (env4, ControlFrame(cf))
      where
        (env1, FrameRef(frame)) := <rgr-eval-exp(|env)> exp1;
        (env2, BlockRef(lib, lbl)) := <rgr-eval-exp(|env1)> exp2;
        (env3, IntV(size)) := <rgr-eval-exp(|env2)> exp3;
        regs := <vm-get-block-size(|env3)> (lib, lbl);
        (env4, cf) := <vm-cf-new(|env3)> (frame, (size, regs))
    
    
    rgr-eval-exp(|env): RGR_ContCur(FVM_BoundLabel(lib, lbl)) -> (env2, Continuation(cont))
      where
        locals_size := <vm-get-block-size(|env)> (lib, lbl);
        (env2, cont) := <vm-cont-new(|env)> (<cf-this(|env)>, (lib, lbl))
        
    rgr-eval-exp(|env): RGR_ContNew(exp, lblexp, RGR_IntVal(cont_size)) -> (env5, Continuation(cont))
      where
        (env2, BlockRef(lib, lbl)) := <rgr-eval-exp(|env)> lblexp;
        locals_size := <vm-get-block-size(|env2)> (lib, lbl);
        (env3, FrameRef(frame)) :=  <rgr-eval-exp(|env2)> exp;
        (env4, cf) := <vm-cf-new(|env3)> (frame, (<string-to-int> cont_size, locals_size));
        (env5, cont) := <vm-cont-new(|env4)> (cf, (lib, lbl))
        
    rgr-eval-exp(|env): RGR_ContNew(exp1, lblexp, exp2) -> (env5, Continuation(cont))
      where
        (env2, BlockRef(lib, lbl)) := <rgr-eval-exp(|env)> lblexp;
        locals_size := <vm-get-block-size(|env2)> (lib, lbl);
        (env3, FrameRef(frame)) := <rgr-eval-exp(|env2)> exp1;
        (env4, IntV(cont_size)) := <rgr-eval-exp(|env3)> exp2;
        (env5, cf) := <vm-cf-new(|env4)> (frame, (cont_size, locals_size));
        (env6, cont) := <vm-cont-new(|env5)> (cf, (lib, lbl))
    
    rgr-eval-exp(|env): RGR_ContGet(c) -> (env, Continuation(<cont-get(|env)> (<cf-this(|env)>, <cont-resolve> c)))

    rgr-eval-exp(|env): RGR_ContGet(exp) -> (env2, Continuation(<cont-get(|env)> (<cf-this(|env)>, ($[_c[idx]], idx))))
      where
        (env2, IntV(idx)) := <rgr-eval-exp(|env)> exp
        
    rgr-eval-exp(|env): RGR_ContGet(exp, c) -> (env2, Continuation(<cont-get(|env)> (cf, <cont-resolve> c)))
      where
        <?(FVM_Cont(_)) <+ ?(FVM_ContIdx(_))> c
      where
        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env)> exp

    rgr-eval-exp(|env): RGR_ContGet(exp1, exp2) -> (env3, Continuation(<cont-get(|env)> (cf, ($[_c[idx]], idx))))
      where
        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env)> exp1;
        (env3, IntV(idx)) := <rgr-eval-exp(|env2)> exp2
      
    rgr-eval-exp(|env): RGR_ContUnpack(exp) -> (env2, ControlFrame(frame))
      where
        (env2, Continuation(cont)) := <rgr-eval-exp(|env)> exp;
        frame := <cont-get-cf(|env2)> cont
      
    rgr-eval-exp(|env): RGR_CFUnpack(exp) -> (env2, FrameRef(frame))
      where
        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env)> exp;
        frame := <cf-get-frame(|env2)> cf
        
      
        
        
        