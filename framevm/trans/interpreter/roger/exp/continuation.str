module continuation

imports 
    signatures/fvm-roger-sig
    signatures/fvm-common-sig
    interpreter/external
    interpreter/util
    
    fvm-common

rules
    rgr-eval-exp(|env): RGR_ContThis() -> (env, Continuation(<cont-this(|env)>))
    
    
    rgr-eval-exp(|env): RGR_ContNew(exp, FVM_BoundLabel(lib, lbl), RGR_IntVal(cont_size)) -> (env3, Continuation(cont))
      where
        locals_size := <vm-get-block-size(|env)> (lib, lbl);
        (env2, FrameRef(frame)) :=  <rgr-eval-exp(|env)> exp;
        (env3, cont) := <vm-cont-new(|env2)> (frame, (lib, lbl), (<string-to-int> cont_size, locals_size))
        
    rgr-eval-exp(|env): RGR_ContNew(exp1, FVM_BoundLabel(lib, lbl), exp2) -> (env4, Continuation(cont))
      where
        locals_size := <vm-get-block-size(|env)> (lib, lbl);
        (env2, FrameRef(frame)) := <rgr-eval-exp(|env)> exp1;
        (env3, IntV(cont_size)) := <rgr-eval-exp(|env2)> exp2;
        (env4, cont) := <vm-cont-new(|env3)> (frame, (lib, lbl), (cont_size, locals_size))
    
    rgr-eval-exp(|env): RGR_ContGet(c) -> (env, Continuation(<cont-get(|env)> (<cont-this(|env)>, <cont-resolve> c)))

    rgr-eval-exp(|env): RGR_ContGet(exp) -> (env2, Continuation(<cont-get(|env)> (<cont-this(|env)>, ($[_c[idx]], idx))))
      where
        (env2, IntV(idx)) := <rgr-eval-exp(|env)> exp
        
    rgr-eval-exp(|env): RGR_ContGet(exp, c) -> (env2, Continuation(<cont-get(|env)> (cf, <cont-resolve> c)))
      where
        <?(FVM_Cont(_)) <+ ?(FVM_ContIdx(_))> c
      where
        (env2, Continuation(cf)) := <rgr-eval-exp(|env)> exp

    rgr-eval-exp(|env): RGR_ContGet(exp1, exp2) -> (env3, Continuation(<cont-get(|env)> (cf, ($[_c[idx]], idx))))
      where
        (env2, Continuation(cf)) := <rgr-eval-exp(|env)> exp1;
        (env3, IntV(idx)) := <rgr-eval-exp(|env2)> exp2
      
    rgr-eval-exp(|env): RGR_ContUnpack(exp) -> (env2, FrameRef(frame))
      where
        (env2, Continuation(cont)) := <rgr-eval-exp(|env)> exp;
        frame := <cont-get-frame(|env2)> cont
        
      
        
        
        