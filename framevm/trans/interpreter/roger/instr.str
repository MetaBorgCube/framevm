module instr

imports 
    signatures/fvm-roger-sig
    signatures/fvm-common-sig
    
    interpreter/external
    interpreter/util
    interpreter/roger/exp/-
    interpreter/roger/roger
    
    fvm-common

rules
    rgr-eval-instr: (RGR_Print(exp), env1) -> env3
      where
        (env2, val) := <rgr-eval-exp(|env1)> exp;
        (env3, out) := <vm-print(|env2)> <val-to-string> val;
        <debug> out
        
        
    rgr-eval-instr: (RGR_PrintChar(exp), env1) -> env3
      where
        (env2, IntV(char)) := <rgr-eval-exp(|env1)> exp;
        (env3, out) := <vm-print-chars(|env2)> [char];
        <debug> out

    rgr-eval-instr: (RGR_Debug(),     env1) ->        <vm-debug(|env1)>
    rgr-eval-instr: (RGR_DebugKill(), env1) -> <fail> <vm-debug(|env1)>
    
    rgr-eval-instr: (RGR_Tick(), env1) -> env1 where vm-tick(|env1)
    rgr-eval-instr: (RGR_Tock(), env1) -> env1 where vm-tock(|env1)

    rgr-eval-instr: (RGR_Set(FVM_Self(), val), env1)   -> <frame-set-current(|env2)> (<cf-this(|env2)>, frame)
      where
        (env2, FrameRef(frame)) := <rgr-eval-exp(|env1)> val
        
    rgr-eval-instr: (RGR_Set(FVM_Path(path), exp), env1) -> env3
      where
        (init, FVM_Slot(idx)) := <split-init-last> path;
        FrameRef(frame) := <rgr-get-path(|env1)> (FrameRef(<frame-this(|env1)>), init);
        (env2, val) := <rgr-eval-exp(|env1)> exp;
        env3 := <frame-set-slot(|env2)> (frame, <string-to-int> idx, val)
        

    rgr-eval-instr: (RGR_Set(exp1, exp2), env1) -> env4
      where
        (env2, IntV(slotId)) := <rgr-eval-exp(|env1)> exp1;
        (env3, val) := <rgr-eval-exp(|env2)> exp2;
        env4 := <frame-set-slot(|env3)> (<frame-this(|env3)>, slotId, val)
        
        
        
    rgr-eval-instr: (RGR_Set(exp1, FVM_Path(path), exp2), env1) -> env4
      where
        (init, FVM_Slot(idx)) := <split-init-last> path;
        (env2, FrameRef(frame)) := <rgr-eval-exp(|env1)> exp1;
        FrameRef(frame') := <rgr-get-path(|env2)> (FrameRef(frame), init);
        (env3, val) := <rgr-eval-exp(|env2)> exp2;
        env4 := <frame-set-slot(|env3)> (frame', <string-to-int> idx, val)
        
    rgr-eval-instr: (RGR_Set(exp1, exp2, exp3), env1) -> env5
      where
        (env2, FrameRef(frame)) := <rgr-eval-exp(|env1)> exp1;
        (env3, IntV(slotId)) := <rgr-eval-exp(|env2)> exp2;
        (env4, val) := <rgr-eval-exp(|env3)> exp3;
        env5 := <frame-set-slot(|env4)> (frame, slotId, val)   
      
        
    rgr-eval-instr: (RGR_Link(ff, FVM_Path(path), FVM_Link(Bind(lbl, idx))), env1) -> env3
      where
        (env2, FrameRef(frame_from)) := <rgr-eval-exp(|env1)> ff;
        FrameRef(frame_to) := <rgr-get-path(|env2)> (FrameRef(<frame-this(|env2)>), path);
        env3 := <frame-link(|env2)> (frame_from, frame_to, (lbl, idx))
        
    rgr-eval-instr: (RGR_Link(ff, FVM_Self(), FVM_Link(Bind(lbl, idx))), env1) -> env3
      where
        (env2, FrameRef(frame_from)) := <rgr-eval-exp(|env1)> ff;
        frame_to := <frame-this(|env2)>;
        env3 := <frame-link(|env2)> (frame_from, frame_to, (lbl, idx))
        
    rgr-eval-instr: (RGR_Link(ff, ft, FVM_Link(Bind(lbl, idx))), env1) -> env4
      where
        (env2, FrameRef(frame_from)) := <rgr-eval-exp(|env1)> ff;
        (env3, FrameRef(frame_to))   := <rgr-eval-exp(|env2)> ft;
        env4 := <frame-link(|env3)> (frame_from, frame_to, (lbl, idx))
        
    rgr-eval-instr: (RGR_ContSet(c, exp), env1) -> env3 
      where
        c' := <cont-resolve> c
      where
        (env2, Continuation(value)) := <rgr-eval-exp(|env1)> exp;
        env3 := <cont-set(|env2)> (<cf-this(|env2)>, c', value)
    
    rgr-eval-instr: (RGR_ContSet(exp1, exp2), env1) -> env4 
      where
        (env2, IntV(slot)) := <rgr-eval-exp(|env1)> exp1;
        (env3, Continuation(value)) := <rgr-eval-exp(|env2)> exp2;
        env4 := <cont-set(|env3)> (<cf-this(|env3)>, slot, value)
        
        
    rgr-eval-instr: (RGR_ContSet(exp1, c, exp2), env1) -> env4 
      where
        slot := <cont-resolve> c
      where
        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env1)> exp1;
        (env3, Continuation(value)) := <rgr-eval-exp(|env2)> exp2;
        env4 := <cont-set(|env3)> (cf, slot, value)
    
    rgr-eval-instr: (RGR_ContSet(exp1, exp2, exp3), env1) -> env5 
      where
        (env2, ControlFrame(cf)) := <rgr-eval-exp(|env1)> exp1;
        (env3, IntV(idx)) := <rgr-eval-exp(|env2)> exp2;
        (env4, Continuation(value)) := <rgr-eval-exp(|env3)> exp3;
        env5 := <cont-set(|env4)> (cf, ($[_c[idx]], idx), value)

	rgr-eval-instr: (RGR_ScopeNew(exp, FVM_Link(Bind(lbl, idx))), env) -> env4
	  where
	    frame_this := <frame-this(|env)>;
        (env2, FrameRef(frame_to)) := <rgr-eval-exp(|env)> exp;
        env3 := <frame-link(|env2)> (frame_to, frame_this, (lbl, idx));
        env4 := <frame-set-current(|env3)> (<cf-this(|env3)>, frame_to)

	rgr-eval-instr: (RGR_ScopeExit(FVM_Path(path)), env) -> env2
	  where
	    FrameRef(frame) := <rgr-get-path(|env)> (FrameRef(<frame-this(|env)>), path);
	    env2 := <frame-set-current(|env)> (<cf-this(|env)>, frame)
	    
	    

	rgr-eval-instr: (RGR_ScopeSetCurrent(exp), env) -> env3
	  where
        (env2, FrameRef(frame)) := <rgr-eval-exp(|env)> exp;
        env3 := <frame-set-current(|env2)> (<cf-this(|env2)>, frame)
