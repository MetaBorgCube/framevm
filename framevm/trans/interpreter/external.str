module external

imports
    signatures/fvm-common-sig

rules 
    external fvm-log(|lvl, msg)       // Log a message to the console

    external vm-init(|)               // (links, conts, slots, locals) -> env
    external vm-store-block(|env)     // env| ((lib, lbl), [instr]) -> env' 
    external vm-has-lib(|env)         // env| lib
    external vm-start(|env)           // env| (lib, block, size) -> env'
    external vm-stop(|env)            // env| -> string
    external vm-execute(eval|env)     // eval|env| -> env'
    
    external vm-debug(|env)           // env| -> env'
    external vm-tick(|env)           // env| a -> a
    external vm-tock(|env)           // env| a -> a
    
    external rgr-size(|env)           // env| -> (int, int)
    external rgr-set(|env)            // env| (slot, val) -> env'
    external rgr-get-any(|env)        // env| slot -> val
    external rgr-get-int(|env)        // env| slot -> int
    external rgr-get-cont(|env)       // env| slot -> continuation
    external rgr-get-frame(|env)      // env| slot -> frame
    external rgr-get-closure(|env)    // env| slot -> closure
    
    external frame-is-empty-slot(|env)// env| (frame, slot) -> val
    external frame-empty-slot(|env)   // env| (frame, slot) -> env'
    external frame-get-slot(|env)     // env| (frame, slot) -> val
    external frame-get-link(|env)     // env| (frame, (link_id, idx)) -> frame
    external frame-set-slot(|env)     // env| (frame, slot, val) -> env'
    external frame-new(|env)          // env| size -> (env', frame)
    external frame-this(|env)         // env| -> frame
    external frame-link(|env)         // env| (frame, frame, (lbl, idx)) -> env'
    external frame-copy(|env)         // env| (frame, policy) -> (env', frame)
    external frame-size(|env)         // env| frame -> int
    external frame-set-current(|env2) // env| (cont, frame) -> env'

    external vm-print(|env)           // env| val -> (env', string)
    external vm-print-chars(|env)     // env| [int] -> (env', string)
    external vm-jump(|env)            // env| (lib, lbl) -> env'
    external vm-cont-new(|env)        // env| (cf, (lib, lbl)) -> (env', cont)
    external vm-cf-new(|env)          // env| (frame, size) -> (env', cf)
    
    external vm-transfer(|env)        // env| [val]-> env'
    external vm-receive(|env)         // env| -> (env', val)

    external cont-call(|env)          // env| cont -> env'
    external cont-set(|env)           // env| (cont, (contId, contIdx), cont) -> env'
    external cont-get(|env)           // env| (cont, (cont_id, idx)) -> cont
    external cont-get-cf(|env)        // env| cont -> cf
    external cf-call(|env)            // env| cf -> env'
    external cf-this(|env)            // env| -> cont
    external cf-copy(|env)            // env| (cont, policy) -> (env', cont)
    external cf-get-frame(|env)       // env| cont -> frame
rules
    ex-set-cx(|env):   (cont, ex)   -> <cont-set(|env)> (cont, ("x", 1), ex)
    cont-set-cc(|env): (cont, ret)  -> <cont-set(|env)> (cont, ("c", 0), ret)
    
    ex-get-cx(|env):   cont -> <cont-get(|env)> (cont, ("x", 1))
    cont-get-cc(|env): cont -> <cont-get(|env)> (cont, ("c", 0))
    
    frame-set(|env): (frame, FVM_Slot(slot), value) -> <frame-set-slot(|env)> (frame, <string-to-int> slot, value)
    frame-set(|env): (frame, FVM_Cont(cont), value) -> <cont-set(|env)> (frame, cont, value)
    
