module util

imports 
    signatures/fvm-common-sig
    interpreter/external
    
    fvm-common
    
rules    
    
    cont-resolve: FVM_Cont(Bind(name, idx))   -> (name, idx)
    cont-resolve: FVM_ContIdx(idx) -> ($[_c[idx]], idx)
      
    fix-string-escaping = string-replace(|"\\n", "\n"); string-replace(|"\\t", "\t"); string-replace(|"\\'", "'"); string-replace(|"\\\"", "\"")
    
         
    // Resolve which label to pick
    jump-eval: (0, then, _) -> then
    jump-eval: (_, _, else) -> else        // Catch all other than 0
    
    // Resolve which continuation to call
    cont-call-z(|env): (0, then, _) -> <cont-call(|env)> then
    cont-call-z(|env): (_, _, else) -> <cont-call(|env)> else        // Catch all other than 0
    
    
    // Check if the two given values are equal
    eval-eq: (e1, e2) -> IntV(1)
      where <equal> (e1, e2)
    eval-eq: _ -> IntV(0)   
    
    // Check if the two given references are equal
    eval-req: (IntV(v1), IntV(v2)) -> IntV(1) where <equal> (v1, v2) 
    eval-req: (Continuation(v1), Continuation(v2)) -> IntV(1) where <equal> (v1, v2) 
    eval-req: (ControlFrame(v1), ControlFrame(v2)) -> IntV(1) where <equal> (v1, v2) 
    eval-req: (FrameRef(v1), FrameRef(v2)) -> IntV(1) where <equal> (v1, v2)  
    eval-req: (NullV(), NullV()) -> IntV(1)
    eval-req: _ -> IntV(0)
    
    // Check if the to given values are equal
    eval-lt: (e1, e2) -> IntV(1)
      where <lt> (e1, e2)
    eval-lt: _ -> IntV(0)
    
rules
    is-intV: IntV(_) -> IntV(1)
    is-intV: _       -> IntV(0)
    
    is-cont: Continuation(_) -> IntV(1)
    is-cont: _               -> IntV(0)
    
    is-frame: FrameRef(_) -> IntV(1)
    is-frame: _           -> IntV(0)
    
    is-cf: ControlFrame(_) -> IntV(1)
    is-cf: _               -> IntV(0)
    
    is-nullV: NullV() -> IntV(1)
    is-nullV: _       -> IntV(0)
    
    is-code: BlockRef(_, _) -> IntV(1)
    is-code: _              -> IntV(0)

rules    // Util
    // Convert a value to a displayable string 
    val-to-string: IntV(v) -> IntV(v)
    val-to-string: FrameRef(frame) -> frame
    val-to-string: Continuation(cont) -> cont
    val-to-string: NullV() -> "NULL"
    val-to-string: ControlFrame(cf) -> cf
    
rules
    apply-until-no-change(s): e -> <apply-until-equal(s)> (e, [])
    apply-until-equal(s): (e, e) -> e
    apply-until-equal(s): (input, _) -> <apply-until-equal(s)> (<topdown(try(s))> input, input)
    
    