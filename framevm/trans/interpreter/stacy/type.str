module type

imports 
    signatures/fvm-stacy-sig
    interpreter/external
    interpreter/util
    
    fvm-common

rules
    // STC_IsInt/0
    // Checks if the element on top of the stack is an integer
    stc-eval: (STC_IsInt(), env1) -> env3
      where
        (env2, val) := <stack-pop-any(|env1)>;
        env3 := <stack-push(|env2)> <is-intV> val
    
    // STC_IsFrame/0
    // Checks if the element on top of the stack is a Frame
    stc-eval: (STC_IsFrame(), env1) -> env3
      where
        (env2, val) := <stack-pop-any(|env1)>;
        env3 := <stack-push(|env2)> <is-frame> val
        
    
    // STC_IsCont/0
    // Checks if the element on top of the stack is a Continuation
    stc-eval: (STC_IsCont(), env1) -> env3
      where
        (env2, val) := <stack-pop-any(|env1)>;
        env3 := <stack-push(|env2)> <is-cont> val
    
    
    // STC_IsClos/0
    // Checks if the element on top of the stack is a closure
    stc-eval: (STC_IsClos(), env1) -> env3
      where
        (env2, val) := <stack-pop-any(|env1)>;
        env3 := <stack-push(|env2)> <is-clos> val
    
