module interpreter

imports 
    signatures/fvm-stacy-sig
    signatures/fvm-common-sig
//    interpreter/stacy/-
    interpreter/roger/-
    interpreter/external
    interpreter/libraries
    
    fvm-common
  
signature
  sorts S
  constructors
    Program: STRING * [Import] * INT * STRING * [Alias] * [STC_Block] -> S  

rules
    eval-program-debug = eval-program(debug-eval)
    debug-eval: t@(e, _) -> t
      with fvm-log(|"INFO", $[Execute: [<strip-annos; write-to-string> e]])
      
    eval-program = eval-program(id)
    
//    eval-program(s): STC_Program(fn, i, size, block, links, blocks) -> <eval-program-(s, stc-eval | "STC")> (Program(fn, i, size, block, links, blocks), <vm-init-stc> (<length> links, 2, size))
    eval-program(s): RGR_Program(fn, i, size, block, links, blocks) -> <eval-program-(s, rgr-eval | "RGR")> (Program(fn, i, size, block, links, blocks), <vm-init-rgr> (<length> links, 2, size))
    
    eval-program-(s, mode-eval | mode): (Program(fn, i, s, FVM_InitBlock(init_block_name), links, blocks), env1) -> out
      where 
        <gti> (<string-length> fn, 1);
        
        (env2, label_bindings) := <foldl(import-blocks(|mode))> (i, (env1, <new-hashtable>));
        blocks' := <resolve-jump-labels-all(|label_bindings, fn)> blocks;
        (_, env3) := <foldl(store-block)> (blocks', (fn, env2));
        (_, env4) := <store-block> (FVM_Block(FVM_Label("_exit"),  None(), FVM_Seq([]), 0), (fn, env3));
        (_, env5) := <store-block> (FVM_Block(FVM_Label("_catch"), None(), FVM_Seq([]), 0), (fn, env4));
        size := <vm-get-block-size(|env5)> (fn, init_block_name);
        env6 := <vm-start(|env5)> (fn, init_block_name, size);
        env7 := <fvm-execute(s, mode-eval|env6)>;
        out  := <vm-stop(|env7)>
    
    eval-program-(s, mode-eval | mode): _ -> "FAIL"
    
rules
    // Ask next instruction and evaluate it
    // Repeat until no instructions are left
    fvm-execute(s, e|env) = vm-execute(s; e <+ eval | env)

    // Instruction not implemented or execution failed
    // Catches current instructions and reports them
    eval: (instr, env) -> <fvm-log(|"ERROR", $[Execution failed at instruction [<strip-annos; write-to-string> instr]]); fail>
