module interpreter

imports 
	signatures/framevm-sig
	interpreter/-
    
rules
  	eval : Program(blocks) -> out
      where 
    	env1 := <init-vm>;
      	env2 := <foldl(store-block)> (blocks, env1);
      	env3 := <start-vm(|env2)> ;
    	env4 := <execute> env3;
    	out  := <stop-vm(|env4)>
    	
    store-block: (PseudoCode(_), env) -> env
  	store-block: (Routine(Label(lbl), Seq(body)), env) -> <store-routine(|env)> (lbl, body)
    
    // Ask next instruction and evaluate it
    // Repeat until no instructions are left
  	execute = 
    	repeat(next-instr; debug(!"execute: "); eval) // this should not be defined recursively!

    // Instruction not implemented or execution failed
	// Catches current instructions and reports them
	eval: (instr, env) -> <fail>
	  where
	  	_ := <debug> ("Execution failed at instruction", instr)