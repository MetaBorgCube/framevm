module fixSeq

imports
    signatures/framevm-sig
    signatures/fvm-stacy-sig
    signatures/fvm-common-sig
    
    fvm-common
    
    analysis/stack
    
rules

    fix-seq: Program(type, fn, i, s, a, blocks) -> Program(type, fn, i, s, a, <map(fix-seq)> blocks)
    
    fix-seq: STC_Block(lbl, None(), body, jump)     -> FVM_Block(lbl, FVM_Seq(seq), <stack-calc-stc> seq)
      with
        seq := <concat> [body, [jump]]
        
    fix-seq: STC_Block(lbl, Some(rget), body, jump) -> FVM_Block(lbl, FVM_Seq(seq), <stack-calc-stc> seq)
      with
        seq := <concat> [[rget], body, [jump]]
    
    
    
    
    resugar-seq: Program("stacy", fn, i, s, a, blocks) -> Program("stacy", fn, i, s, a, <map(resugar-seq-stc)> blocks)
    
    resugar-seq-stc: FVM_Block(lbl, FVM_Seq([h|tail]), s) -> STC_Block(lbl, Some(h), body, jump)
      where
        <is-ret> h;
        (body, jump) := <split-init-last> tail
        
    resugar-seq-stc: FVM_Block(lbl, FVM_Seq(instrs), s) -> STC_Block(lbl, None(), body, jump)
      where
        (body, jump) := <split-init-last> instrs
      
   
    is-ret: r@STC_ContRGetN(_) -> r
    is-ret: r@STC_ContRGet() -> r
