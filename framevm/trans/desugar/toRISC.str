module toRISC

imports
	signatures/framevm-sig
	desugar

rules

	to-RISC-all: Program(blocks) -> Program(<map(to-RISC-all)> blocks)
	to-RISC-all: Block(lbl, Seq(body)) -> Block(lbl, Seq(body_risc))
	  where
		body_risc := <to-RISC(r-return)><to-RISC(r-set)><to-RISC(r-get)><to-RISC(r-link)> body
  
  	to-RISC(s): x -> <foldr(![], (s <+ idf))> x 
  	idf: (e, body) -> [e|body]
  	
	r-link: (Link(path, lbl), body) -> [Get(path), LinkR(lbl) | body]
  
    r-set: (Set(Path(path)), body) -> [Get(Self()), Swap(), SetR(Path(path)) | body]

    r-get: (Get(Path(path)), body) -> [Get(Self()), GetR(Path(path)) | body]

	r-return: (Return(), body) -> [ContGet(), ContUnpack(), Swap(), SetR(Path([Slot("r")])), ContGet(), ContCall()]


//  ControlInstr.Return    = <return>					// Takes return address from opstack and copies top of stack to caller stack  
//  ControlInstr.JumpZ     = <jumpz <Label> <Label>>	// Jump to first label if stack zero, else jump to other label
//  ControlInstr.Jump      = <jump <Label>>			// Unconditional jump to LABEL
//  ControlInstr.Call      = <call <Label> <Label>>	// Call block LABEL, using frame on the stack
//  
//  ControlInstr.ScopeUp   = <scopeup <Path> <Label>>
//  ControlInstr.ScopeDown = <scopedown <Label>>