( [("concat_strings", "CONCAT_STRINGS")]
, [ FVM_Block(
      FVM_Label("CONCAT_STRINGS")
    , Some(5)
    , FVM_Seq(
        [ STC_Get(FVM_Path([FVM_Slot("0"), FVM_Slot("0")]))
        , STC_Get(FVM_Path([FVM_Slot("1"), FVM_Slot("0")]))
        , STC_IAdd()
        , STC_Dup()
        , STC_IPush("1")
        , STC_IAdd()
        , STC_NewR()
        , STC_Dup()
        , STC_SwapN("2")
        , STC_SetR(FVM_Path([FVM_Slot("0")]))
        , STC_New("5")
        , STC_Dup()
        , STC_SwapN("2")
        , STC_SetR(FVM_Path([FVM_Slot("2")]))
        , STC_Dup()
        , STC_Get(FVM_Path([FVM_Slot("0")]))
        , STC_SetR(FVM_Path([FVM_Slot("0")]))
        , STC_Dup()
        , STC_Get(FVM_Path([FVM_Slot("1")]))
        , STC_SetR(FVM_Path([FVM_Slot("1")]))
        , STC_Dup()
        , STC_IPush("0")
        , STC_SetR(FVM_Path([FVM_Slot("3")]))
        , STC_Dup()
        , STC_IPush("0")
        , STC_SetR(FVM_Path([FVM_Slot("4")]))
        , STC_ScopeSetCurrent()
        , STC_Jump(FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_CHECK"))
        ]
      )
    , 0
    )
  , FVM_Block(
      FVM_Label("__CONCAT_CHECK")
    , None()
    , FVM_Seq(
        [ STC_Get(FVM_Path([FVM_Slot("3")]))
        , STC_IPush("2")
        , STC_IEq()
        , STC_JumpZ(FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_STRING"), FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_END"))
        ]
      )
    , 0
    )
  , FVM_Block(
      FVM_Label("__CONCAT_STRING")
    , None()
    , FVM_Seq(
        [ STC_Get(FVM_Path([FVM_Slot("3")]))
        , STC_Get()
        , STC_GetR(FVM_Path([FVM_Slot("0")]))
        , STC_IPush("0")
        , STC_Jump(FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_LOOP"))
        ]
      )
    , 2
    )
  , FVM_Block(
      FVM_Label("__CONCAT_LOOP")
    , None()
    , FVM_Seq(
        [ STC_DupN("2")
        , STC_DupN("2")
        , STC_IEq()
        , STC_JumpZ(FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_CHAR"), FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_STRING_END"))
        ]
      )
    , 0
    )
  , FVM_Block(
      FVM_Label("__CONCAT_CHAR")
    , None()
    , FVM_Seq(
        [ STC_IPush("1")
        , STC_IAdd()
        , STC_Dup()
        , STC_Get(FVM_Path([FVM_Slot("3")]))
        , STC_Get()
        , STC_Swap()
        , STC_GetR()
        , STC_Get(FVM_Path([FVM_Slot("4")]))
        , STC_IPush("1")
        , STC_IAdd()
        , STC_Dup()
        , STC_Set(FVM_Path([FVM_Slot("4")]))
        , STC_Get(FVM_Path([FVM_Slot("2")]))
        , STC_SwapN("2")
        , STC_SetR()
        , STC_Jump(FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_LOOP"))
        ]
      )
    , 0
    )
  , FVM_Block(
      FVM_Label("__CONCAT_STRING_END")
    , None()
    , FVM_Seq(
        [ STC_Pop()
        , STC_Pop()
        , STC_Get(FVM_Path([FVM_Slot("3")]))
        , STC_IPush("1")
        , STC_IAdd()
        , STC_Set(FVM_Path([FVM_Slot("3")]))
        , STC_Jump(FVM_BoundLabel("stdlib.strings.concat", "__CONCAT_CHECK"))
        ]
      )
    , -2
    )
  , FVM_Block(
      FVM_Label("__CONCAT_END")
    , None()
    , FVM_Seq([STC_Get(FVM_Path([FVM_Slot("2")])), STC_Return()])
    , 0
    )
  ]
)