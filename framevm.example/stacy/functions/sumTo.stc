{  
	sumTo (int: i):int = { 
		if i == 0:
			return 0
		else:
  			return i + (sumTo(i -1))
	}
	
	print(sumTo(42))		// prints 903
}
	
MAIN:
	stack := 3
	new 1			// create new call frame
	dup				//	
	link [] P		// Link function scope to local scope
	dup 			// duplicate ref to call frame
	ipush 42 		// 
	setr [0] 		// assign to formal parameter i in call frame
	call SUMTO MAIN_END	// create operand stack with frame ref on top of stack and run function
						// Returns to END

SUMTO:
	stack := 4
  	get [0] 		// i
  	ipush 0			//
  	eqi				// i == 0
	jumpz SUMTO_ELSE SUMTO_THEN

SUMTO_THEN:
	ipush 0			//
	return			// return 0
	
SUMTO_ELSE:
	new	1			// Call frame for recursion
	dup				//
	link [P] P		// Link it to parent
	
	dup				// Setup parameters
	ipush -1		//
	get [0]			// 
	addi			// i -1
	setr [0]		// store as argument
	
	call SUMTO SUMTO_RETURN

SUMTO_RETURN:
	rget			// get result	
	get [0]			// i
	addi			//
	return			//
	
MAIN_END:
	rget			// Get return value
	print			// print sumto(1)
					//
	ipush 0			// load exitcode 0
	return			// exit
