#init 2
{
	rec A = {
		func (int:i):int = { 
			if (i) == 0:
				return 42
			else:
  				return new A().func(i - 1)
		}
	}
	
	var x := new A()
	var y := x.func(2)
	print(y)  			// print 42	
}

MAIN:
	new					// New A
	dup					//
	link [] P			// Link to root
	set [0]				// x := new A()
						//
	new	1				// Func callframe
	dup					//
	link [0] P			// Link to A
						//
	dup					//
	ipush 2				//
	setr [0]			// first arg
	
	call FUNC MAIN_CONT
	
MAIN_CONT:
	get [r]				// get result
	set [1]				// y := result
	get [1]				//
	print				// print(y)
						//
	ipush 0				// load exitcode 0
	return				// exit
	
FUNC:
	get [0]				//
	ipush 0				//
	eqi					// i == 0
	jumpz FUNC_ELSE FUNC_THEN
	
FUNC_THEN:
	ipush 42			//
	return				// return 42
	
FUNC_ELSE:	
	new 1				// func call frame
	dup					//
						//
	new					// New A
	dup					//
	link [P, P] P		//
	linkr P				// link call frame to A
						//
	dup					//
	get [0]				//
	ipush -1			//
	addi				// i - 1
	setr [0]			// store arg
	call FUNC_THEN FUNC_END
	
FUNC_END:
	get [r]				//
	return				// fallthrough return
	
	
	
	