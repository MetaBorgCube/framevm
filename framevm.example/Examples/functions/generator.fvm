{
	gen func ():int = {
		yield 1
		yield 2
		yield 3
	}
	
	for i in func():
		print(i)	
}

MAIN:
	new						// For frame
	dup						//
	link [] P				//
							//
	newscope FOR_INIT		// Enter for loop
	
FOR_INIT:
	new 0					// Try frame
	dup						// Used for calling the generator in 
	link [] P				//
							//
	new 0					// Catch frame
	dup						// Used to catch the no more element exception
	link [] P				//
							//
	try FOR_START FOR_TERM FOR_END
	
FOR_START:
	new 0					// Func call frame
	dup						//
	link [] P				//
							//
	cnew FUNC 2				// Create new control frame
	dup						//
	cget [x]				// Copy over exception handler
	csetr [x]				//
	dup						//
	cget []					// Set the return address
	csetr [c]				//
							//
	jump FOR				// Start actual for loop
	
FOR:
	ccall FOR_RET			// Call the function
	
FOR_RET:
	rget 2					// Get result and continuation
	print					// Print res
	jump FOR				// Start the loop again
	
FOR_TERM:
	cret [n]				// Return to the fallthrough continuation
	
FOR_END:
	jump MAIN_END			// For loop is finished
	
FUNC:
	cget []					// Yield a value and a continuation
	ipush 1					// The value
	cget [c]				// 
	transfer 2				// Copy them over
	cget [c]				//
	ccall FUNC_1			// Yield 1
	
FUNC_1:
	ipush 2					// Yield 2
	yield FUNC_2			//
	
FUNC_2:
	ipush 3					// Yield 3
	yield FUNC_3			//
	
FUNC_3:	
	ipush -1				// Throw -1
	throw					//
	
MAIN_END:
	ipush 0					//
	return					// exitcode 0
	
