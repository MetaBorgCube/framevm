#init 1
{
	var count := 0
	for i = 0 -> 3:
		var j := i
		while j != 4:
			j := j + 1
			print (j)
			count := count + 1
		print(j)
//	print(j)				// should not work (scoping)
	print(count)			// print(9)
}

MAIN:
	ipush 0					//
	set [0]					// count := 0
							//
	new	2					// For frame
	dup						//
	link [] P				//
	newscope FOR_INIT		// move execution to new frame
	
FOR_INIT:
	ipush 0					//
	set [0]					// i := 0
	jump FOR				// start actual loop

FOR:
	get[0]					// i
	ipush 3					//
	lti						// i < 3
	jumpz FOR_END FOR_BODY	// continue or stop loop
	
FOR_BODY:
	get [0]					// i
	set [1]					// j := i
	
	new						// while frame
	dup						//
	link [] P				//
	newscope WHILE			// enter while loop

WHILE:
	get [P, 1]				// j
	ipush 4					//
	eqi						// j == 4
	jumpz WHILE_BODY WHILE_END 
	
WHILE_BODY:
	get [P, 1]				// j
	dup						//
	print					// print(j)
	ipush 1					//
	addi					//
	set [P, 1]				// j := j + 1
							//
	get [P, P, 0]			// count
	ipush 1					//
	addi					//
	set [P, P, 0]			// count := count + 1
	jump WHILE				//
	
WHILE_END:
	exitscope [P] FOR_INC		// exit while loop
	
FOR_INC:
	get [0]					//
	ipush 1					//
	addi					//
	set [0]					// i := i + 1
	jump FOR				// start new iteration of for
	
	
FOR_END:
	exitscope [P] MAIN_END	// break for loop, continue in outer scope

MAIN_END:
	get[0]					// count
	print					// print(count)
							//
	ipush 0					// load exitcode 0
	return					// exit
	
	
	
	