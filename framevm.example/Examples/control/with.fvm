{
	with i from [5,6,7]:
		with j from [1,2,3]:
			assert((i + j) == 9)
			print(i)
			print(j)
			
			// print 6, 3
			// print 7, 2
}

MAIN:
	new						// New frame for the outer with
	dup						//
	link [] P				//
							//
	scopedown WITH_I_1		// Enter with scope
	
MAIN_END:
	ipush 0					// Exitcode 0
	return					//
	
ASSERT_FALSE:
	get [n]					// Call the continuation to the next option
	ccall					//
	
WITH_I_1:
	cnew WITH_I_2			// New continuation for next option
	set [n]					//
							//
	ipush 5					//
	set [0]					// i := 5
	jump WITH_I_BODY		// Go to the body
		
WITH_I_2:
	cnew WITH_I_3			// New continuation for next option
	set [n]					//
							//
	ipush 6					// i := 6
	set [0]					//	
	jump WITH_I_BODY		// Execute body
		
WITH_I_3:
	cnew WITH_I_EXIT		// New continuation for next option
	set [n]					//
							//
	ipush 7					//
	set [0]					// i := 7
	jump WITH_I_BODY		// Execute body
	
WITH_I_BODY:
	new						// Frame for inner with
	dup						//
	link [] P				//
							//
	scopedown WITH_J_1		// Enter inner with
	
WITH_I_END:
	get [n]					// 
	ccall					// 
	
WITH_I_EXIT:
	scopeup [P] MAIN_END	// Exit the with loop
	
WITH_J_1:
	cnew WITH_J_2			// Inner with next option
	set [n]					//
							//
	ipush 1					//
	set [0]					// j := 1
	jump WITH_J_BODY		//
	
WITH_J_2:
	cnew WITH_J_3			// Next option
	set [n]					//
							//
	ipush 2					//
	set [0]					// j := 2
	jump WITH_J_BODY		//
	
	
WITH_J_3:
	cnew WITH_J_END			// Next option
	set [n]					//
							//
	ipush 3					//
	set [0]					// j := 3
	jump WITH_J_BODY		//
	
WITH_J_BODY:
	get [0]					// j
	get [P, 0]				// i
	addi					// i + j
	ipush 9					//
	eqi						// == 9
							// Assert
	jumpz ASSERT_FALSE WITH_J_BODY2
	
WITH_J_BODY2:
	get [P, 0]				// i
	print					//
							//
	get [0]					// j
	print					//
							//
	get[n]					//
	ccall					// Goto next
	
WITH_J_END:
	scopeup [P] WITH_I_END	// Exit inner with
	
	
	